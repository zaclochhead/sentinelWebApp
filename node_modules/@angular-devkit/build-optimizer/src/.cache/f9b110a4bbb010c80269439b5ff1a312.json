{"remainingRequest":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@swimlane\\ngx-charts\\release\\bar-chart\\series-vertical.component.js","dependencies":[{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@swimlane\\ngx-charts\\release\\bar-chart\\series-vertical.component.js","mtime":1511187281000},{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527928412363},{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["import { __decorate } from \"tslib\";\nimport { __metadata } from \"tslib\";\nimport { Component, Input, Output, EventEmitter, ChangeDetectionStrategy, TemplateRef } from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { formatLabel } from '../common/label.helper';\nvar SeriesVerticalComponent = /*@__PURE__*/ (function () {\n    function SeriesVerticalComponent() {\n        this.type = 'standard';\n        this.tooltipDisabled = false;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n    }\n    SeriesVerticalComponent.prototype.ngOnChanges = function (changes) {\n        this.update();\n    };\n    SeriesVerticalComponent.prototype.update = function () {\n        var _this = this;\n        this.updateTooltipSettings();\n        var width;\n        if (this.series.length) {\n            width = this.xScale.bandwidth();\n        }\n        var d0 = 0;\n        var total;\n        if (this.type === 'normalized') {\n            total = this.series.map(function (d) { return d.value; }).reduce(function (sum, d) { return sum + d; }, 0);\n        }\n        this.bars = this.series.map(function (d, index) {\n            var value = d.value;\n            var label = d.name;\n            var formattedLabel = formatLabel(label);\n            var roundEdges = _this.roundEdges;\n            var bar = {\n                value: value,\n                label: label,\n                roundEdges: roundEdges,\n                data: d,\n                width: width,\n                formattedLabel: formattedLabel,\n                height: 0,\n                x: 0,\n                y: 0\n            };\n            if (_this.type === 'standard') {\n                bar.height = Math.abs(_this.yScale(value) - _this.yScale(0));\n                bar.x = _this.xScale(label);\n                if (value < 0) {\n                    bar.y = _this.yScale(0);\n                }\n                else {\n                    bar.y = _this.yScale(value);\n                }\n            }\n            else if (_this.type === 'stacked') {\n                var offset0 = d0;\n                var offset1 = offset0 + value;\n                d0 += value;\n                bar.height = _this.yScale(offset0) - _this.yScale(offset1);\n                bar.x = 0;\n                bar.y = _this.yScale(offset1);\n                bar.offset0 = offset0;\n                bar.offset1 = offset1;\n            }\n            else if (_this.type === 'normalized') {\n                var offset0 = d0;\n                var offset1 = offset0 + value;\n                d0 += value;\n                if (total > 0) {\n                    offset0 = (offset0 * 100) / total;\n                    offset1 = (offset1 * 100) / total;\n                }\n                else {\n                    offset0 = 0;\n                    offset1 = 0;\n                }\n                bar.height = _this.yScale(offset0) - _this.yScale(offset1);\n                bar.x = 0;\n                bar.y = _this.yScale(offset1);\n                bar.offset0 = offset0;\n                bar.offset1 = offset1;\n                value = (offset1 - offset0).toFixed(2) + '%';\n            }\n            if (_this.colors.scaleType === 'ordinal') {\n                bar.color = _this.colors.getColor(label);\n            }\n            else {\n                if (_this.type === 'standard') {\n                    bar.color = _this.colors.getColor(value);\n                    bar.gradientStops = _this.colors.getLinearGradientStops(value);\n                }\n                else {\n                    bar.color = _this.colors.getColor(bar.offset1);\n                    bar.gradientStops = _this.colors.getLinearGradientStops(bar.offset1, bar.offset0);\n                }\n            }\n            var tooltipLabel = formattedLabel;\n            if (_this.seriesName) {\n                tooltipLabel = _this.seriesName + \" \\u2022 \" + formattedLabel;\n                bar.data.series = _this.seriesName;\n            }\n            bar.tooltipText = _this.tooltipDisabled ? undefined : \"\\n        <span class=\\\"tooltip-label\\\">\" + tooltipLabel + \"</span>\\n        <span class=\\\"tooltip-val\\\">\" + value.toLocaleString() + \"</span>\\n      \";\n            return bar;\n        });\n    };\n    SeriesVerticalComponent.prototype.updateTooltipSettings = function () {\n        this.tooltipPlacement = this.tooltipDisabled ? undefined : 'top';\n        this.tooltipType = this.tooltipDisabled ? undefined : 'tooltip';\n    };\n    SeriesVerticalComponent.prototype.isActive = function (entry) {\n        if (!this.activeEntries)\n            return false;\n        var item = this.activeEntries.find(function (d) {\n            return entry.name === d.name && entry.series === d.series;\n        });\n        return item !== undefined;\n    };\n    SeriesVerticalComponent.prototype.onClick = function (data) {\n        this.select.emit(data);\n    };\n    SeriesVerticalComponent.prototype.trackBy = function (index, bar) {\n        return bar.label;\n    };\n    return SeriesVerticalComponent;\n}());\nexport { SeriesVerticalComponent };\n//# sourceMappingURL=series-vertical.component.js.map\n",null]}