{"remainingRequest":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\ng2-smart-table\\lib\\data-source\\server\\server.data-source.js","dependencies":[{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\ng2-smart-table\\lib\\data-source\\server\\server.data-source.js","mtime":1505225756000},{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527928412363},{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["import { __extends } from \"tslib\";\r\nimport { URLSearchParams } from '@angular/http';\r\nimport { LocalDataSource } from '../local/local.data-source';\r\nimport { ServerSourceConf } from './server-source.conf';\r\nimport { getDeepFromObject } from '../../helpers';\r\nimport 'rxjs/add/operator/toPromise';\r\nvar ServerDataSource = /*@__PURE__*/ (function (_super) {\r\n    __extends(ServerDataSource, _super);\r\n    function ServerDataSource(http, conf) {\r\n        if (conf === void 0) {\r\n            conf = {};\r\n        }\r\n        var _this = _super.call(this) || this;\r\n        _this.http = http;\r\n        _this.lastRequestCount = 0;\r\n        _this.conf = new ServerSourceConf(conf);\r\n        if (!_this.conf.endPoint) {\r\n            throw new Error('At least endPoint must be specified as a configuration of the server data source.');\r\n        }\r\n        return _this;\r\n    }\r\n    ServerDataSource.prototype.count = function () {\r\n        return this.lastRequestCount;\r\n    };\r\n    ServerDataSource.prototype.getElements = function () {\r\n        var _this = this;\r\n        return this.requestElements().map(function (res) {\r\n            _this.lastRequestCount = _this.extractTotalFromResponse(res);\r\n            _this.data = _this.extractDataFromResponse(res);\r\n            return _this.data;\r\n        }).toPromise();\r\n    };\r\n    /**\r\n     * Extracts array of data from server response\r\n     * @param res\r\n     * @returns {any}\r\n     */\r\n    ServerDataSource.prototype.extractDataFromResponse = function (res) {\r\n        var rawData = res.json();\r\n        var data = !!this.conf.dataKey ? getDeepFromObject(rawData, this.conf.dataKey, []) : rawData;\r\n        if (data instanceof Array) {\r\n            return data;\r\n        }\r\n        throw new Error(\"Data must be an array.\\n    Please check that data extracted from the server response by the key '\" + this.conf.dataKey + \"' exists and is array.\");\r\n    };\r\n    /**\r\n     * Extracts total rows count from the server response\r\n     * Looks for the count in the heders first, then in the response body\r\n     * @param res\r\n     * @returns {any}\r\n     */\r\n    ServerDataSource.prototype.extractTotalFromResponse = function (res) {\r\n        if (res.headers.has(this.conf.totalKey)) {\r\n            return +res.headers.get(this.conf.totalKey);\r\n        }\r\n        else {\r\n            var rawData = res.json();\r\n            return getDeepFromObject(rawData, this.conf.totalKey, 0);\r\n        }\r\n    };\r\n    ServerDataSource.prototype.requestElements = function () {\r\n        return this.http.get(this.conf.endPoint, this.createRequestOptions());\r\n    };\r\n    ServerDataSource.prototype.createRequestOptions = function () {\r\n        var requestOptions = {};\r\n        requestOptions.params = new URLSearchParams();\r\n        requestOptions = this.addSortRequestOptions(requestOptions);\r\n        requestOptions = this.addFilterRequestOptions(requestOptions);\r\n        return this.addPagerRequestOptions(requestOptions);\r\n    };\r\n    ServerDataSource.prototype.addSortRequestOptions = function (requestOptions) {\r\n        var _this = this;\r\n        var searchParams = requestOptions.params;\r\n        if (this.sortConf) {\r\n            this.sortConf.forEach(function (fieldConf) {\r\n                searchParams.set(_this.conf.sortFieldKey, fieldConf.field);\r\n                searchParams.set(_this.conf.sortDirKey, fieldConf.direction.toUpperCase());\r\n            });\r\n        }\r\n        return requestOptions;\r\n    };\r\n    ServerDataSource.prototype.addFilterRequestOptions = function (requestOptions) {\r\n        var _this = this;\r\n        var searchParams = requestOptions.params;\r\n        if (this.filterConf.filters) {\r\n            this.filterConf.filters.forEach(function (fieldConf) {\r\n                if (fieldConf['search']) {\r\n                    searchParams.set(_this.conf.filterFieldKey.replace('#field#', fieldConf['field']), fieldConf['search']);\r\n                }\r\n            });\r\n        }\r\n        return requestOptions;\r\n    };\r\n    ServerDataSource.prototype.addPagerRequestOptions = function (requestOptions) {\r\n        var searchParams = requestOptions.params;\r\n        if (this.pagingConf && this.pagingConf['page'] && this.pagingConf['perPage']) {\r\n            searchParams.set(this.conf.pagerPageKey, this.pagingConf['page']);\r\n            searchParams.set(this.conf.pagerLimitKey, this.pagingConf['perPage']);\r\n        }\r\n        return requestOptions;\r\n    };\r\n    return ServerDataSource;\r\n}(LocalDataSource));\r\nexport { ServerDataSource };\r\n//# sourceMappingURL=server.data-source.js.map\r\n",null]}