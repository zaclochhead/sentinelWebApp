{"remainingRequest":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@nebular\\auth\\services\\token\\token-storage.js","dependencies":[{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@nebular\\auth\\services\\token\\token-storage.js","mtime":499162500000},{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527928412363},{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["import { Inject, Injectable } from '@angular/core';\nimport { NB_AUTH_TOKEN_CLASS } from '../../auth.options';\nimport { nbCreateToken } from './token';\nvar NbTokenStorage = /*@__PURE__*/ (function () {\n    function NbTokenStorage() {\n    }\n    return NbTokenStorage;\n}());\nexport { NbTokenStorage };\n/**\n * Service that uses browser localStorage as a storage.\n *\n * The token storage is provided into auth module the following way:\n * ```\n * { provide: NbTokenStorage, useClass: NbTokenLocalStorage },\n * ```\n *\n * If you need to change the storage behaviour or provide your own - just extend your class from basic `NbTokenStorage`\n * or `NbTokenLocalStorage` and provide in your `app.module`:\n * ```\n * { provide: NbTokenStorage, useClass: NbTokenCustomStorage },\n * ```\n *\n */\nvar NbTokenLocalStorage = /*@__PURE__*/ (function () {\n    function NbTokenLocalStorage(tokenClass) {\n        this.tokenClass = tokenClass;\n        this.key = 'auth_app_token';\n    }\n    /**\n     * Returns token from localStorage\n     * @returns {NbAuthToken}\n     */\n    /**\n       * Returns token from localStorage\n       * @returns {NbAuthToken}\n       */\n    NbTokenLocalStorage.prototype.get = /**\n       * Returns token from localStorage\n       * @returns {NbAuthToken}\n       */\n        function () {\n            return nbCreateToken(this.tokenClass, localStorage.getItem(this.key));\n        };\n    /**\n     * Sets token to localStorage\n     * @param {NbAuthToken} token\n     */\n    /**\n       * Sets token to localStorage\n       * @param {NbAuthToken} token\n       */\n    NbTokenLocalStorage.prototype.set = /**\n       * Sets token to localStorage\n       * @param {NbAuthToken} token\n       */\n        function (token) {\n            localStorage.setItem(this.key, token.toString());\n        };\n    /**\n     * Sets raw (string) token to localStorage\n     * @param {string} token\n     */\n    /**\n       * Sets raw (string) token to localStorage\n       * @param {string} token\n       */\n    NbTokenLocalStorage.prototype.setRaw = /**\n       * Sets raw (string) token to localStorage\n       * @param {string} token\n       */\n        function (token) {\n            localStorage.setItem(this.key, token);\n        };\n    /**\n     * Clears token from localStorage\n     */\n    /**\n       * Clears token from localStorage\n       */\n    NbTokenLocalStorage.prototype.clear = /**\n       * Clears token from localStorage\n       */\n        function () {\n            localStorage.removeItem(this.key);\n        };\n    return NbTokenLocalStorage;\n}());\nexport { NbTokenLocalStorage };\n//# sourceMappingURL=token-storage.js.map\n",null]}