{"remainingRequest":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@asymmetrik\\ngx-leaflet\\dist\\leaflet\\layers\\base\\leaflet-baselayers.directive.js","dependencies":[{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@asymmetrik\\ngx-leaflet\\dist\\leaflet\\layers\\base\\leaflet-baselayers.directive.js","mtime":1514571139000},{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527928412363},{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["import { Directive, Input, KeyValueDiffers, NgZone } from '@angular/core';\nimport { LeafletUtil } from '../../core/leaflet.util';\nimport { LeafletDirective } from '../../core/leaflet.directive';\nimport { LeafletDirectiveWrapper } from '../../core/leaflet.directive.wrapper';\nimport { LeafletControlLayersWrapper } from '../control/leaflet-control-layers.wrapper';\n/**\n * Baselayers directive\n *\n * This directive is provided as a convenient way to add baselayers to the map. The input accepts\n * a key-value map of layer name -> layer. Mutable changed are detected. On changes, a differ is\n * used to determine what changed so that layers are appropriately added or removed. This directive\n * will also add the layers control so users can switch between available base layers.\n *\n * To specify which layer to show as the 'active' baselayer, you will want to add it to the map\n * using the layers directive. Otherwise, the plugin will use the last one it sees.\n */\nvar LeafletBaseLayersDirective = /*@__PURE__*/ (function () {\n    function LeafletBaseLayersDirective(leafletDirective, differs, zone) {\n        this.differs = differs;\n        this.zone = zone;\n        this.leafletDirective = new LeafletDirectiveWrapper(leafletDirective);\n        this.controlLayers = new LeafletControlLayersWrapper(zone);\n        this.baseLayersDiffer = this.differs.find({}).create();\n    }\n    Object.defineProperty(LeafletBaseLayersDirective.prototype, \"baseLayers\", {\n        get: function () {\n            return this.baseLayersValue;\n        },\n        set: \n        // Set/get baseLayers\n        function (v) {\n            this.baseLayersValue = v;\n            this.updateBaseLayers();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    LeafletBaseLayersDirective.prototype.ngOnDestroy = function () {\n        var _this = this;\n        this.baseLayers = {};\n        this.zone.runOutsideAngular(function () {\n            _this.controlLayers.getLayersControl().remove();\n        });\n    };\n    LeafletBaseLayersDirective.prototype.ngOnInit = function () {\n        var _this = this;\n        // Init the map\n        this.leafletDirective.init();\n        // Initially configure the controlLayers\n        this.zone.runOutsideAngular(function () {\n            _this.controlLayers\n                .init({}, _this.layersControlOptions)\n                .addTo(_this.leafletDirective.getMap());\n        });\n        this.updateBaseLayers();\n    };\n    LeafletBaseLayersDirective.prototype.ngDoCheck = function () {\n        this.updateBaseLayers();\n    };\n    LeafletBaseLayersDirective.prototype.updateBaseLayers = function () {\n        var map = this.leafletDirective.getMap();\n        var layersControl = this.controlLayers.getLayersControl();\n        if (null != map && null != layersControl && null != this.baseLayersDiffer) {\n            var changes = this.baseLayersDiffer.diff(this.baseLayersValue);\n            var results = this.controlLayers.applyBaseLayerChanges(changes);\n            if (results.changed()) {\n                this.syncBaseLayer();\n            }\n        }\n    };\n    /**\n     * Check the current base layer and change it to the new one if necessary\n     */\n    /**\n         * Check the current base layer and change it to the new one if necessary\n         */\n    LeafletBaseLayersDirective.prototype.syncBaseLayer = /**\n         * Check the current base layer and change it to the new one if necessary\n         */\n        function () {\n            var _this = this;\n            var map = this.leafletDirective.getMap();\n            var layers = LeafletUtil.mapToArray(this.baseLayers);\n            var foundLayer;\n            // Search all the layers in the map to see if we can find them in the baselayer array\n            map.eachLayer(function (l) {\n                foundLayer = layers.find(function (bl) { return (l === bl); });\n            });\n            // Did we find the layer?\n            if (null != foundLayer) {\n                // Yes - set the baselayer to the one we found\n                this.baseLayer = foundLayer;\n            }\n            else {\n                // No - set the baselayer to the first in the array and add it to the map\n                if (layers.length > 0) {\n                    this.baseLayer = layers[0];\n                    this.zone.runOutsideAngular(function () {\n                        _this.baseLayer.addTo(map);\n                    });\n                }\n            }\n        };\n    return LeafletBaseLayersDirective;\n}());\nexport { LeafletBaseLayersDirective };\n//# sourceMappingURL=leaflet-baselayers.directive.js.map\n",null]}