{"remainingRequest":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@nebular\\auth\\services\\token\\token.js","dependencies":[{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@nebular\\auth\\services\\token\\token.js","mtime":499162500000},{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527928412363},{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["import { __extends } from \"tslib\";\r\nimport { urlBase64Decode } from '../../helpers';\r\nexport function nbCreateToken(tokenClass, token) {\r\n    return new tokenClass(token);\r\n}\r\n/**\r\n * Wrapper for simple (text) token\r\n */\r\nvar /**\r\n * Wrapper for simple (text) token\r\n */ NbAuthSimpleToken = (function () {\r\n    function NbAuthSimpleToken(token) {\r\n        this.token = token;\r\n    }\r\n    /**\r\n     * Returns the token value\r\n     * @returns string\r\n     */\r\n    /**\r\n       * Returns the token value\r\n       * @returns string\r\n       */\r\n    NbAuthSimpleToken.prototype.getValue = /**\r\n       * Returns the token value\r\n       * @returns string\r\n       */\r\n        function () {\r\n            return this.token;\r\n        };\r\n    /**\r\n     * Is non empty and valid\r\n     * @returns {boolean}\r\n     */\r\n    /**\r\n       * Is non empty and valid\r\n       * @returns {boolean}\r\n       */\r\n    NbAuthSimpleToken.prototype.isValid = /**\r\n       * Is non empty and valid\r\n       * @returns {boolean}\r\n       */\r\n        function () {\r\n            return !!this.token;\r\n        };\r\n    /**\r\n     * Validate value and convert to string, if value is not valid return empty string\r\n     * @returns {string}\r\n     */\r\n    /**\r\n       * Validate value and convert to string, if value is not valid return empty string\r\n       * @returns {string}\r\n       */\r\n    NbAuthSimpleToken.prototype.toString = /**\r\n       * Validate value and convert to string, if value is not valid return empty string\r\n       * @returns {string}\r\n       */\r\n        function () {\r\n            return !!this.token ? this.token : '';\r\n        };\r\n    return NbAuthSimpleToken;\r\n}());\r\n/**\r\n * Wrapper for simple (text) token\r\n */\r\nexport { NbAuthSimpleToken };\r\n/**\r\n * Wrapper for JWT token with additional methods.\r\n */\r\nvar /**\r\n * Wrapper for JWT token with additional methods.\r\n */ NbAuthJWTToken = (function (_super) {\r\n    __extends(NbAuthJWTToken, _super);\r\n    function NbAuthJWTToken() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * Returns payload object\r\n     * @returns any\r\n     */\r\n    /**\r\n       * Returns payload object\r\n       * @returns any\r\n       */\r\n    NbAuthJWTToken.prototype.getPayload = /**\r\n       * Returns payload object\r\n       * @returns any\r\n       */\r\n        function () {\r\n            if (!this.token) {\r\n                throw new Error('Cannot extract payload from an empty token.');\r\n            }\r\n            var parts = this.token.split('.');\r\n            if (parts.length !== 3) {\r\n                throw new Error(\"The token \" + this.token + \" is not valid JWT token and must consist of three parts.\");\r\n            }\r\n            var decoded;\r\n            try {\r\n                decoded = urlBase64Decode(parts[1]);\r\n            }\r\n            catch (e) {\r\n                throw new Error(\"The token \" + this.token + \" is not valid JWT token and cannot be parsed.\");\r\n            }\r\n            if (!decoded) {\r\n                throw new Error(\"The token \" + this.token + \" is not valid JWT token and cannot be decoded.\");\r\n            }\r\n            return JSON.parse(decoded);\r\n        };\r\n    /**\r\n     * Returns expiration date\r\n     * @returns Date\r\n     */\r\n    /**\r\n       * Returns expiration date\r\n       * @returns Date\r\n       */\r\n    NbAuthJWTToken.prototype.getTokenExpDate = /**\r\n       * Returns expiration date\r\n       * @returns Date\r\n       */\r\n        function () {\r\n            var decoded = this.getPayload();\r\n            if (!decoded.hasOwnProperty('exp')) {\r\n                return null;\r\n            }\r\n            var date = new Date(0);\r\n            date.setUTCSeconds(decoded.exp);\r\n            return date;\r\n        };\r\n    /**\r\n     * Is data expired\r\n     * @returns {boolean}\r\n     */\r\n    /**\r\n       * Is data expired\r\n       * @returns {boolean}\r\n       */\r\n    NbAuthJWTToken.prototype.isValid = /**\r\n       * Is data expired\r\n       * @returns {boolean}\r\n       */\r\n        function () {\r\n            return _super.prototype.isValid.call(this) && (!this.getTokenExpDate() || new Date() < this.getTokenExpDate());\r\n        };\r\n    return NbAuthJWTToken;\r\n}(NbAuthSimpleToken));\r\n/**\r\n * Wrapper for JWT token with additional methods.\r\n */\r\nexport { NbAuthJWTToken };\r\n//# sourceMappingURL=token.js.map\r\n",null]}