{"remainingRequest":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@nebular\\theme\\components\\popover\\helpers\\adjustment.helper.js","dependencies":[{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@nebular\\theme\\components\\popover\\helpers\\adjustment.helper.js","mtime":499162500000},{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527928412363},{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["import { Injectable, Inject } from '@angular/core';\nimport { NB_WINDOW } from '../../../theme.options';\nimport { NbPositioningHelper } from './positioning.helper';\nimport { NbPopoverAdjustment, NbPopoverPlacement } from './model';\n/**\n * Describes the bypass order of the {@link NbPopoverPlacement} in the {@link NbPopoverAdjustment}.\n * */\nvar NB_ORDERED_PLACEMENTS = (_a = {},\n    _a[NbPopoverAdjustment.CLOCKWISE] = [\n        NbPopoverPlacement.TOP,\n        NbPopoverPlacement.RIGHT,\n        NbPopoverPlacement.BOTTOM,\n        NbPopoverPlacement.LEFT,\n    ],\n    _a[NbPopoverAdjustment.COUNTERCLOCKWISE] = [\n        NbPopoverPlacement.TOP,\n        NbPopoverPlacement.LEFT,\n        NbPopoverPlacement.BOTTOM,\n        NbPopoverPlacement.RIGHT,\n    ],\n    _a);\nvar NbAdjustmentHelper = /*@__PURE__*/ (function () {\n    function NbAdjustmentHelper(positioningHelper, window) {\n        this.positioningHelper = positioningHelper;\n        this.window = window;\n    }\n    /**\n     * Calculated {@link NbPopoverPosition} based on placed element, host element,\n     * placed element placement and adjustment strategy.\n     *\n     * @param placed {ClientRect} placed element relatively host.\n     * @param host {ClientRect} host element.\n     * @param placement {NbPopoverPlacement} placed element placement relatively host.\n     * @param adjustment {NbPopoverAdjustment} adjustment strategy.\n     *\n     * @return {NbPopoverPosition} calculated position.\n     * */\n    /**\n       * Calculated {@link NbPopoverPosition} based on placed element, host element,\n       * placed element placement and adjustment strategy.\n       *\n       * @param placed {ClientRect} placed element relatively host.\n       * @param host {ClientRect} host element.\n       * @param placement {NbPopoverPlacement} placed element placement relatively host.\n       * @param adjustment {NbPopoverAdjustment} adjustment strategy.\n       *\n       * @return {NbPopoverPosition} calculated position.\n       * */\n    NbAdjustmentHelper.prototype.adjust = /**\n       * Calculated {@link NbPopoverPosition} based on placed element, host element,\n       * placed element placement and adjustment strategy.\n       *\n       * @param placed {ClientRect} placed element relatively host.\n       * @param host {ClientRect} host element.\n       * @param placement {NbPopoverPlacement} placed element placement relatively host.\n       * @param adjustment {NbPopoverAdjustment} adjustment strategy.\n       *\n       * @return {NbPopoverPosition} calculated position.\n       * */\n        function (placed, host, placement, adjustment) {\n            var _this = this;\n            var placements = NB_ORDERED_PLACEMENTS[adjustment].slice();\n            var ordered = this.orderPlacements(placement, placements);\n            var possible = ordered.map(function (pl) {\n                return ({\n                    position: _this.positioningHelper.calcPosition(placed, host, pl),\n                    placement: pl,\n                });\n            });\n            return this.chooseBest(placed, possible);\n        };\n    /**\n     * Searches first adjustment which doesn't go beyond the viewport.\n     *\n     * @param placed {ClientRect} placed element relatively host.\n     * @param possible {NbPopoverPosition[]} possible positions list ordered according to adjustment strategy.\n     *\n     * @return {NbPopoverPosition} calculated position.\n     * */\n    /**\n       * Searches first adjustment which doesn't go beyond the viewport.\n       *\n       * @param placed {ClientRect} placed element relatively host.\n       * @param possible {NbPopoverPosition[]} possible positions list ordered according to adjustment strategy.\n       *\n       * @return {NbPopoverPosition} calculated position.\n       * */\n    NbAdjustmentHelper.prototype.chooseBest = /**\n       * Searches first adjustment which doesn't go beyond the viewport.\n       *\n       * @param placed {ClientRect} placed element relatively host.\n       * @param possible {NbPopoverPosition[]} possible positions list ordered according to adjustment strategy.\n       *\n       * @return {NbPopoverPosition} calculated position.\n       * */\n        function (placed, possible) {\n            var _this = this;\n            return possible.find(function (adjust) { return _this.inViewPort(placed, adjust); }) || possible.shift();\n        };\n    /**\n     * Finds out is adjustment doesn't go beyond of the view port.\n     *\n     * @param placed {ClientRect} placed element relatively host.\n     * @param position {NbPopoverPosition} position of the placed element.\n     *\n     * @return {boolean} true if placed element completely viewport.\n     * */\n    /**\n       * Finds out is adjustment doesn't go beyond of the view port.\n       *\n       * @param placed {ClientRect} placed element relatively host.\n       * @param position {NbPopoverPosition} position of the placed element.\n       *\n       * @return {boolean} true if placed element completely viewport.\n       * */\n    NbAdjustmentHelper.prototype.inViewPort = /**\n       * Finds out is adjustment doesn't go beyond of the view port.\n       *\n       * @param placed {ClientRect} placed element relatively host.\n       * @param position {NbPopoverPosition} position of the placed element.\n       *\n       * @return {boolean} true if placed element completely viewport.\n       * */\n        function (placed, position) {\n            return position.position.top - this.window.pageYOffset > 0\n                && position.position.left - this.window.pageXOffset > 0\n                && position.position.top + placed.height < this.window.innerHeight + this.window.pageYOffset\n                && position.position.left + placed.width < this.window.innerWidth + this.window.pageXOffset;\n        };\n    /**\n     * Reorder placements list to make placement start point and fit {@link NbPopoverAdjustment}\n     *\n     * @param placement {NbPopoverPlacement} active placement\n     * @param placements {NbPopoverPlacement[]} placements list according to the active adjustment strategy.\n     *\n     * @return {NbPopoverPlacement[]} correctly ordered placements list.\n     *\n     * @example order placements for {@link NbPopoverPlacement#RIGHT} and {@link NbPopoverAdjustment#CLOCKWISE}\n     * ```\n     * const placements = NB_ORDERED_PLACEMENTS[NbPopoverAdjustment.CLOCKWISE];\n     * const ordered = orderPlacement(NbPopoverPlacement.RIGHT, placements);\n     *\n     * expect(ordered).toEqual([\n     *  NbPopoverPlacement.RIGHT,\n     *  NbPopoverPlacement.BOTTOM,\n     *  NbPopoverPlacement.LEFT,\n     *  NbPopoverPlacement.TOP,\n     * ]);\n     * ```\n     * */\n    /**\n       * Reorder placements list to make placement start point and fit {@link NbPopoverAdjustment}\n       *\n       * @param placement {NbPopoverPlacement} active placement\n       * @param placements {NbPopoverPlacement[]} placements list according to the active adjustment strategy.\n       *\n       * @return {NbPopoverPlacement[]} correctly ordered placements list.\n       *\n       * @example order placements for {@link NbPopoverPlacement#RIGHT} and {@link NbPopoverAdjustment#CLOCKWISE}\n       * ```\n       * const placements = NB_ORDERED_PLACEMENTS[NbPopoverAdjustment.CLOCKWISE];\n       * const ordered = orderPlacement(NbPopoverPlacement.RIGHT, placements);\n       *\n       * expect(ordered).toEqual([\n       *  NbPopoverPlacement.RIGHT,\n       *  NbPopoverPlacement.BOTTOM,\n       *  NbPopoverPlacement.LEFT,\n       *  NbPopoverPlacement.TOP,\n       * ]);\n       * ```\n       * */\n    NbAdjustmentHelper.prototype.orderPlacements = /**\n       * Reorder placements list to make placement start point and fit {@link NbPopoverAdjustment}\n       *\n       * @param placement {NbPopoverPlacement} active placement\n       * @param placements {NbPopoverPlacement[]} placements list according to the active adjustment strategy.\n       *\n       * @return {NbPopoverPlacement[]} correctly ordered placements list.\n       *\n       * @example order placements for {@link NbPopoverPlacement#RIGHT} and {@link NbPopoverAdjustment#CLOCKWISE}\n       * ```\n       * const placements = NB_ORDERED_PLACEMENTS[NbPopoverAdjustment.CLOCKWISE];\n       * const ordered = orderPlacement(NbPopoverPlacement.RIGHT, placements);\n       *\n       * expect(ordered).toEqual([\n       *  NbPopoverPlacement.RIGHT,\n       *  NbPopoverPlacement.BOTTOM,\n       *  NbPopoverPlacement.LEFT,\n       *  NbPopoverPlacement.TOP,\n       * ]);\n       * ```\n       * */\n        function (placement, placements) {\n            var index = placements.indexOf(placement);\n            var start = placements.splice(index, placements.length);\n            return start.concat.apply(start, placements);\n        };\n    return NbAdjustmentHelper;\n}());\nexport { NbAdjustmentHelper };\nvar _a;\n//# sourceMappingURL=adjustment.helper.js.map\n",null]}