{"remainingRequest":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@nebular\\theme\\components\\popover\\popover.directive.js","dependencies":[{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@nebular\\theme\\components\\popover\\popover.directive.js","mtime":499162500000},{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527928412363},{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\nimport { ComponentFactoryResolver, Directive, ElementRef, HostListener, Input, PLATFORM_ID, Inject, } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { takeWhile } from 'rxjs/operators';\nimport { NbPositioningHelper } from './helpers/positioning.helper';\nimport { NbPopoverComponent } from './popover.component';\nimport { NbThemeService } from '../../services/theme.service';\nimport { NbAdjustmentHelper } from './helpers/adjustment.helper';\nimport { NbTriggerHelper } from './helpers/trigger.helper';\nimport { NbPopoverAdjustment, NbPopoverMode, NbPopoverPlacement, } from './helpers/model';\nimport { NbPlacementHelper } from './helpers/placement.helper';\n/**\n * Powerful popover directive, which provides the best UX for your users.\n *\n * ![image](assets/images/components/popover.gif)\n *\n * @example Popover can accept different content such as:\n * TemplateRef\n *\n * ```\n * <button [nbPopover]=\"templateRef\"></button>\n * <ng-template #templateRef>\n *   <span>Hello, Popover!</span>\n * </ng-template>\n * ```\n *\n * @example Custom components\n *\n * ```\n * <button [nbPopover]=\"NbCardComponent\"></button>\n * ```\n *\n * @example Primitive types\n *\n * ```\n * <button nbPopover=\"Hello, Popover!\"></button>\n * ```\n *\n * @example Popover has different placements, such as: top, bottom, left and right\n * which can be used as following:\n *\n * ```\n * <button nbPopover=\"Hello, Popover!\" nbPopoverPlacement=\"left\"></button>\n * ```\n *\n * @example By default popover will try to adjust itself to maximally fit viewport\n * and provide the best user experience. It will try to change placement of the popover container.\n * If you wanna disable this behaviour just set it falsy value.\n *\n * ```\n * <button nbPopover=\"Hello, Popover!\" [nbPopoverAdjust]=\"false\"></button>\n * ```\n *\n * */\n/*\n*\n* TODO\n* Rendering strategy have to be refactored.\n* For now directive creates and deletes popover container each time.\n* I think we can handle this slightly smarter and show/hide in any situations.\n*/\nvar NbPopoverDirective = /*@__PURE__*/ (function () {\n    function NbPopoverDirective(hostRef, themeService, componentFactoryResolver, positioningHelper, adjustmentHelper, triggerHelper, platformId, placementHelper) {\n        this.hostRef = hostRef;\n        this.themeService = themeService;\n        this.componentFactoryResolver = componentFactoryResolver;\n        this.positioningHelper = positioningHelper;\n        this.adjustmentHelper = adjustmentHelper;\n        this.triggerHelper = triggerHelper;\n        this.platformId = platformId;\n        this.placementHelper = placementHelper;\n        /**\n           * Position will be calculated relatively host element based on the placement.\n           * Can be top, right, bottom, left, start or end.\n           * */\n        this.placement = NbPopoverPlacement.TOP;\n        /**\n           * Container placement will be changes automatically based on this strategy if container can't fit view port.\n           * Set this property to any falsy value if you want to disable automatically adjustment.\n           * Available values: clockwise, counterclockwise.\n           * */\n        this.adjustment = NbPopoverAdjustment.CLOCKWISE;\n        /**\n           * Describes when the container will be shown.\n           * Available options: click, hover and hint\n           * */\n        this.mode = NbPopoverMode.CLICK;\n        /*\n           * Is used for unsubscribe all subscriptions after component destructuring.\n           * */\n        this.alive = true;\n    }\n    Object.defineProperty(NbPopoverDirective.prototype, \"isShown\", {\n        /**\n         * Returns true if popover already shown.\n         * @return boolean\n         * */\n        get: /**\n           * Returns true if popover already shown.\n           * @return boolean\n           * */ function () {\n            return !!this.containerRef;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NbPopoverDirective.prototype, \"isHidden\", {\n        /**\n         * Returns true if popover hidden.\n         * @return boolean\n         * */\n        get: /**\n           * Returns true if popover hidden.\n           * @return boolean\n           * */ function () {\n            return !this.containerRef;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NbPopoverDirective.prototype, \"container\", {\n        get: function () {\n            return this.containerRef.instance;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NbPopoverDirective.prototype, \"containerElement\", {\n        get: function () {\n            return this.containerRef.location.nativeElement;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NbPopoverDirective.prototype, \"hostElement\", {\n        get: function () {\n            return this.hostRef.nativeElement;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    NbPopoverDirective.prototype.ngOnInit = function () {\n        if (isPlatformBrowser(this.platformId)) {\n            this.registerTriggers();\n        }\n    };\n    NbPopoverDirective.prototype.ngOnDestroy = function () {\n        this.alive = false;\n    };\n    /**\n     * Show popover.\n     * */\n    /**\n       * Show popover.\n       * */\n    NbPopoverDirective.prototype.show = /**\n       * Show popover.\n       * */\n        function () {\n            if (this.isHidden) {\n                this.renderPopover();\n            }\n        };\n    /**\n     * Hide popover.\n     * */\n    /**\n       * Hide popover.\n       * */\n    NbPopoverDirective.prototype.hide = /**\n       * Hide popover.\n       * */\n        function () {\n            if (this.isShown) {\n                this.destroyPopover();\n            }\n        };\n    /**\n     * Toggle popover state.\n     * */\n    /**\n       * Toggle popover state.\n       * */\n    NbPopoverDirective.prototype.toggle = /**\n       * Toggle popover state.\n       * */\n        function () {\n            if (this.isShown) {\n                this.hide();\n            }\n            else {\n                this.show();\n            }\n        };\n    /*\n       * Adjust popover position on window resize.\n       * Window resize may change host element position, so popover relocation required.\n       *\n       * TODO\n       * Fix tslint to add capability make HostListener private.\n       * */\n    NbPopoverDirective.prototype.onResize = /*\n       * Adjust popover position on window resize.\n       * Window resize may change host element position, so popover relocation required.\n       *\n       * TODO\n       * Fix tslint to add capability make HostListener private.\n       * */\n        function () {\n            if (this.isShown) {\n                this.place();\n            }\n        };\n    /*\n     * Subscribe to the popover triggers created from the {@link NbPopoverDirective#mode}.\n     * see {@link NbTriggerHelper}\n     * */\n    /*\n       * Subscribe to the popover triggers created from the {@link NbPopoverDirective#mode}.\n       * see {@link NbTriggerHelper}\n       * */\n    NbPopoverDirective.prototype.registerTriggers = /*\n       * Subscribe to the popover triggers created from the {@link NbPopoverDirective#mode}.\n       * see {@link NbTriggerHelper}\n       * */\n        function () {\n            var _this = this;\n            var _a = this.triggerHelper\n                .createTrigger(this.hostElement, function () { return _this.containerRef; }, this.mode), open = _a.open, close = _a.close, toggle = _a.toggle;\n            open.pipe(takeWhile(function () { return _this.alive; }))\n                .subscribe(function () { return _this.show(); });\n            close.pipe(takeWhile(function () { return _this.alive; }))\n                .subscribe(function () { return _this.hide(); });\n            toggle.pipe(takeWhile(function () { return _this.alive; }))\n                .subscribe(function () { return _this.toggle(); });\n        };\n    /*\n     * Renders popover putting {@link NbPopoverComponent} in the top of {@link NbLayoutComponent}\n     * and positioning container based on {@link NbPopoverDirective#placement}\n     * and {@link NbPopoverDirective#adjustment}.\n     * */\n    /*\n       * Renders popover putting {@link NbPopoverComponent} in the top of {@link NbLayoutComponent}\n       * and positioning container based on {@link NbPopoverDirective#placement}\n       * and {@link NbPopoverDirective#adjustment}.\n       * */\n    NbPopoverDirective.prototype.renderPopover = /*\n       * Renders popover putting {@link NbPopoverComponent} in the top of {@link NbLayoutComponent}\n       * and positioning container based on {@link NbPopoverDirective#placement}\n       * and {@link NbPopoverDirective#adjustment}.\n       * */\n        function () {\n            var _this = this;\n            var factory = this.componentFactoryResolver.resolveComponentFactory(NbPopoverComponent);\n            this.themeService.appendToLayoutTop(factory)\n                .pipe(takeWhile(function () { return _this.alive; }))\n                .subscribe(function (containerRef) {\n                _this.containerRef = containerRef;\n                _this.patchPopover(_this.content, _this.context);\n                /*\n                         * Have to call detectChanges because on this phase {@link NbPopoverComponent} isn't inserted in the DOM\n                         * and haven't got calculated size.\n                         * But we should have size on this step to calculate popover position correctly.\n                         *\n                         * TODO\n                         * I don't think we have to call detectChanges each time we're using {@link NbThemeService#appendToLayoutTop}.\n                         * Investigate, maybe we can create method in the {@link NbThemeService}\n                         * which will call {@link NbThemeService#appendToLayoutTop} and 'do' detectChanges,\n                         * instead of performing this call by service client.\n                         * */\n                /*\n                 * Have to call detectChanges because on this phase {@link NbPopoverComponent} isn't inserted in the DOM\n                 * and haven't got calculated size.\n                 * But we should have size on this step to calculate popover position correctly.\n                 *\n                 * TODO\n                 * I don't think we have to call detectChanges each time we're using {@link NbThemeService#appendToLayoutTop}.\n                 * Investigate, maybe we can create method in the {@link NbThemeService}\n                 * which will call {@link NbThemeService#appendToLayoutTop} and 'do' detectChanges,\n                 * instead of performing this call by service client.\n                 * */\n                _this.containerRef.changeDetectorRef.markForCheck();\n                _this.containerRef.changeDetectorRef.detectChanges();\n                _this.place();\n            });\n        };\n    /*\n     * Destroys the {@link NbPopoverComponent} and nullify its reference;\n     * */\n    /*\n       * Destroys the {@link NbPopoverComponent} and nullify its reference;\n       * */\n    NbPopoverDirective.prototype.destroyPopover = /*\n       * Destroys the {@link NbPopoverComponent} and nullify its reference;\n       * */\n        function () {\n            this.containerRef.destroy();\n            this.containerRef = null;\n        };\n    /*\n     * Moves {@link NbPopoverComponent} relatively host component based on the {@link NbPopoverDirective#placement}.\n     * */\n    /*\n       * Moves {@link NbPopoverComponent} relatively host component based on the {@link NbPopoverDirective#placement}.\n       * */\n    NbPopoverDirective.prototype.place = /*\n       * Moves {@link NbPopoverComponent} relatively host component based on the {@link NbPopoverDirective#placement}.\n       * */\n        function () {\n            var hostRect = this.hostElement.getBoundingClientRect();\n            var containerRect = this.containerElement.getBoundingClientRect();\n            this.adjust(containerRect, hostRect);\n        };\n    /*\n     * Set container content and context.\n     * */\n    /*\n       * Set container content and context.\n       * */\n    NbPopoverDirective.prototype.patchPopover = /*\n       * Set container content and context.\n       * */\n        function (content, context) {\n            this.container.content = content;\n            this.container.context = context;\n        };\n    /*\n     * Set container placement.\n     * */\n    /*\n       * Set container placement.\n       * */\n    NbPopoverDirective.prototype.patchPopoverPlacement = /*\n       * Set container placement.\n       * */\n        function (placement) {\n            this.container.placement = placement;\n        };\n    /*\n     * Set container position.\n     * */\n    /*\n       * Set container position.\n       * */\n    NbPopoverDirective.prototype.patchPopoverPosition = /*\n       * Set container position.\n       * */\n        function (_a) {\n            var top = _a.top, left = _a.left;\n            this.container.positionTop = top;\n            this.container.positionLeft = left;\n        };\n    /*\n     * Calculates container adjustment and sets container position and placement.\n     * */\n    /*\n       * Calculates container adjustment and sets container position and placement.\n       * */\n    NbPopoverDirective.prototype.adjust = /*\n       * Calculates container adjustment and sets container position and placement.\n       * */\n        function (containerRect, hostRect) {\n            var _a = this.performAdjustment(containerRect, hostRect), placement = _a.placement, position = _a.position;\n            this.patchPopoverPlacement(placement);\n            this.patchPopoverPosition(position);\n        };\n    /*\n     * Checks if {@link NbPopoverDirective#adjustment} can be performed and runs it.\n     * If not, just calculates element position.\n     * */\n    /*\n       * Checks if {@link NbPopoverDirective#adjustment} can be performed and runs it.\n       * If not, just calculates element position.\n       * */\n    NbPopoverDirective.prototype.performAdjustment = /*\n       * Checks if {@link NbPopoverDirective#adjustment} can be performed and runs it.\n       * If not, just calculates element position.\n       * */\n        function (placed, host) {\n            if (this.adjustment) {\n                return this.calcAdjustment(placed, host);\n            }\n            return this.calcPosition(placed, host);\n        };\n    /*\n     * Calculate adjustment.\n     * see {@link NbAdjustmentHelper}.\n     * */\n    /*\n       * Calculate adjustment.\n       * see {@link NbAdjustmentHelper}.\n       * */\n    NbPopoverDirective.prototype.calcAdjustment = /*\n       * Calculate adjustment.\n       * see {@link NbAdjustmentHelper}.\n       * */\n        function (placed, host) {\n            var placement = this.placementHelper.toPhysicalPlacement(this.placement);\n            return this.adjustmentHelper.adjust(placed, host, placement, this.adjustment);\n        };\n    /*\n     * Calculate position.\n     * see {@link NbPositioningHelper}\n     * */\n    /*\n       * Calculate position.\n       * see {@link NbPositioningHelper}\n       * */\n    NbPopoverDirective.prototype.calcPosition = /*\n       * Calculate position.\n       * see {@link NbPositioningHelper}\n       * */\n        function (placed, host) {\n            var placement = this.placementHelper.toPhysicalPlacement(this.placement);\n            return {\n                position: this.positioningHelper.calcPosition(placed, host, placement),\n                placement: placement,\n            };\n        };\n    return NbPopoverDirective;\n}());\nexport { NbPopoverDirective };\n//# sourceMappingURL=popover.directive.js.map\n",null]}