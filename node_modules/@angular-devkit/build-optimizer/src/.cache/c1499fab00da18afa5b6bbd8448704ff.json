{"remainingRequest":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@asymmetrik\\ngx-leaflet\\dist\\leaflet\\core\\leaflet.directive.js","dependencies":[{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@asymmetrik\\ngx-leaflet\\dist\\leaflet\\core\\leaflet.directive.js","mtime":1514571139000},{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527928412363},{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["import { Directive, ElementRef, EventEmitter, HostListener, Input, NgZone, Output } from '@angular/core';\nimport { latLng, map } from 'leaflet';\nvar LeafletDirective = /*@__PURE__*/ (function () {\n    function LeafletDirective(element, zone) {\n        // Nothing here\n        this.element = element;\n        this.zone = zone;\n        this.DEFAULT_ZOOM = 1;\n        this.DEFAULT_CENTER = latLng(38.907192, -77.036871);\n        this.DEFAULT_FPZ_OPTIONS = {};\n        this.fitBoundsOptions = this.DEFAULT_FPZ_OPTIONS;\n        this.panOptions = this.DEFAULT_FPZ_OPTIONS;\n        this.zoomOptions = this.DEFAULT_FPZ_OPTIONS;\n        this.zoomPanOptions = this.DEFAULT_FPZ_OPTIONS;\n        // Default configuration\n        this.options = {};\n        // Configure callback function for the map\n        this.mapReady = new EventEmitter();\n    }\n    LeafletDirective.prototype.ngOnInit = function () {\n        var _this = this;\n        // Create the map with some reasonable defaults\n        this.zone.runOutsideAngular(function () {\n            _this.map = map(_this.element.nativeElement, _this.options);\n        });\n        // Only setView if there is a center/zoom\n        if (null != this.center && null != this.zoom) {\n            this.setView(this.center, this.zoom);\n        }\n        // Set up all the initial settings\n        if (null != this.fitBounds) {\n            this.setFitBounds(this.fitBounds);\n        }\n        this.doResize();\n        // Fire map ready event\n        this.mapReady.emit(this.map);\n    };\n    LeafletDirective.prototype.ngOnChanges = function (changes) {\n        /*\n                 * The following code is to address an issue with our (basic) implementation of\n                 * zooming and panning. From our testing, it seems that a pan operation followed\n                 * by a zoom operation in the same thread will interfere with eachother. The zoom\n                 * operation interrupts/cancels the pan, resulting in a final center point that is\n                 * inaccurate. The solution seems to be to either separate them with a timeout or\n                  * to collapse them into a setView call.\n                 */\n        // Zooming and Panning\n        if (changes['zoom'] && changes['center'] && null != this.zoom && null != this.center) {\n            this.setView(changes['center'].currentValue, changes['zoom'].currentValue);\n        }\n        else if (changes['zoom']) {\n            this.setZoom(changes['zoom'].currentValue);\n        }\n        else if (changes['center']) {\n            this.setCenter(changes['center'].currentValue);\n        }\n        // Fit bounds\n        if (changes['fitBounds']) {\n            this.setFitBounds(changes['fitBounds'].currentValue);\n        }\n    };\n    LeafletDirective.prototype.getMap = function () {\n        return this.map;\n    };\n    LeafletDirective.prototype.onResize = function () {\n        this.delayResize();\n    };\n    /**\n     * Resize the map to fit it's parent container\n     */\n    /**\n         * Resize the map to fit it's parent container\n         */\n    LeafletDirective.prototype.doResize = /**\n         * Resize the map to fit it's parent container\n         */\n        function () {\n            var _this = this;\n            // Invalidate the map size to trigger it to update itself\n            this.zone.runOutsideAngular(function () {\n                _this.map.invalidateSize({});\n            });\n        };\n    /**\n     * Manage a delayed resize of the component\n     */\n    /**\n         * Manage a delayed resize of the component\n         */\n    LeafletDirective.prototype.delayResize = /**\n         * Manage a delayed resize of the component\n         */\n        function () {\n            if (null != this.resizeTimer) {\n                clearTimeout(this.resizeTimer);\n            }\n            this.resizeTimer = setTimeout(this.doResize.bind(this), 200);\n        };\n    /**\n     * Set the view (center/zoom) all at once\n     * @param center The new center\n     * @param zoom The new zoom level\n     */\n    /**\n         * Set the view (center/zoom) all at once\n         * @param center The new center\n         * @param zoom The new zoom level\n         */\n    LeafletDirective.prototype.setView = /**\n         * Set the view (center/zoom) all at once\n         * @param center The new center\n         * @param zoom The new zoom level\n         */\n        function (center, zoom) {\n            var _this = this;\n            if (this.map && null != center && null != zoom) {\n                this.zone.runOutsideAngular(function () {\n                    _this.map.setView(center, zoom, _this.zoomPanOptions);\n                });\n            }\n        };\n    /**\n     * Set the map zoom level\n     * @param zoom the new zoom level for the map\n     */\n    /**\n         * Set the map zoom level\n         * @param zoom the new zoom level for the map\n         */\n    LeafletDirective.prototype.setZoom = /**\n         * Set the map zoom level\n         * @param zoom the new zoom level for the map\n         */\n        function (zoom) {\n            var _this = this;\n            if (this.map && null != zoom) {\n                this.zone.runOutsideAngular(function () {\n                    _this.map.setZoom(zoom, _this.zoomOptions);\n                });\n            }\n        };\n    /**\n     * Set the center of the map\n     * @param center the center point\n     */\n    /**\n         * Set the center of the map\n         * @param center the center point\n         */\n    LeafletDirective.prototype.setCenter = /**\n         * Set the center of the map\n         * @param center the center point\n         */\n        function (center) {\n            var _this = this;\n            if (this.map && null != center) {\n                this.zone.runOutsideAngular(function () {\n                    _this.map.panTo(center, _this.panOptions);\n                });\n            }\n        };\n    /**\n     * Fit the map to the bounds\n     * @param center the center point\n     */\n    /**\n         * Fit the map to the bounds\n         * @param center the center point\n         */\n    LeafletDirective.prototype.setFitBounds = /**\n         * Fit the map to the bounds\n         * @param center the center point\n         */\n        function (latLngBounds) {\n            var _this = this;\n            if (this.map && null != latLngBounds) {\n                this.zone.runOutsideAngular(function () {\n                    _this.map.fitBounds(latLngBounds, _this.fitBoundsOptions);\n                });\n            }\n        };\n    return LeafletDirective;\n}());\nexport { LeafletDirective };\n//# sourceMappingURL=leaflet.directive.js.map\n",null]}