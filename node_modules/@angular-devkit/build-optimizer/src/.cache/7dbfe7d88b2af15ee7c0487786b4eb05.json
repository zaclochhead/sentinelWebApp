{"remainingRequest":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@swimlane\\ngx-charts\\release\\common\\circle-series.component.js","dependencies":[{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@swimlane\\ngx-charts\\release\\common\\circle-series.component.js","mtime":1511187281000},{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527928412363},{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["import { __decorate } from \"tslib\";\nimport { __metadata } from \"tslib\";\nimport { Component, Input, Output, EventEmitter, ChangeDetectionStrategy, TemplateRef } from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { formatLabel } from '../common/label.helper';\nimport { id } from '../utils/id';\nvar CircleSeriesComponent = /*@__PURE__*/ (function () {\n    function CircleSeriesComponent() {\n        this.type = 'standard';\n        this.tooltipDisabled = false;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.barVisible = false;\n    }\n    CircleSeriesComponent.prototype.ngOnInit = function () {\n        this.gradientId = 'grad' + id().toString();\n        this.gradientFill = \"url(#\" + this.gradientId + \")\";\n    };\n    CircleSeriesComponent.prototype.ngOnChanges = function (changes) {\n        this.update();\n    };\n    CircleSeriesComponent.prototype.update = function () {\n        this.circles = this.getCircles();\n        this.circle = this.circles.find(function (c) {\n            return c.opacity !== 0;\n        });\n    };\n    CircleSeriesComponent.prototype.getCircles = function () {\n        var _this = this;\n        var seriesName = this.data.name;\n        return this.data.series.map(function (d, i) {\n            var value = d.value;\n            var label = d.name;\n            var tooltipLabel = formatLabel(label);\n            if (value) {\n                var cx = void 0;\n                if (_this.scaleType === 'time') {\n                    cx = _this.xScale(label);\n                }\n                else if (_this.scaleType === 'linear') {\n                    cx = _this.xScale(Number(label));\n                }\n                else {\n                    cx = _this.xScale(label);\n                }\n                var cy = _this.yScale(_this.type === 'standard' ? value : d.d1);\n                var radius = 5;\n                var height = _this.yScale.range()[0] - cy;\n                var opacity = 0;\n                if (label && _this.visibleValue && label.toString() === _this.visibleValue.toString()) {\n                    opacity = 1;\n                }\n                var color = void 0;\n                if (_this.colors.scaleType === 'linear') {\n                    if (_this.type === 'standard') {\n                        color = _this.colors.getColor(value);\n                    }\n                    else {\n                        color = _this.colors.getColor(d.d1);\n                    }\n                }\n                else {\n                    color = _this.colors.getColor(seriesName);\n                }\n                var data = {\n                    series: seriesName,\n                    value: value,\n                    name: label\n                };\n                return {\n                    classNames: [\"circle-data-\" + i],\n                    value: value,\n                    label: label,\n                    data: data,\n                    cx: cx,\n                    cy: cy,\n                    radius: radius,\n                    height: height,\n                    tooltipLabel: tooltipLabel,\n                    color: color,\n                    opacity: opacity,\n                    seriesName: seriesName,\n                    gradientStops: _this.getGradientStops(color),\n                    min: d.min,\n                    max: d.max\n                };\n            }\n        }).filter(function (circle) { return circle !== undefined; });\n    };\n    CircleSeriesComponent.prototype.getTooltipText = function (_a) {\n        var tooltipLabel = _a.tooltipLabel, value = _a.value, seriesName = _a.seriesName, min = _a.min, max = _a.max;\n        return \"\\n      <span class=\\\"tooltip-label\\\">\" + seriesName + \" \\u2022 \" + tooltipLabel + \"</span>\\n      <span class=\\\"tooltip-val\\\">\" + value.toLocaleString() + this.getTooltipMinMaxText(min, max) + \"</span>\\n    \";\n    };\n    CircleSeriesComponent.prototype.getTooltipMinMaxText = function (min, max) {\n        if (min !== undefined || max !== undefined) {\n            var result = ' (';\n            if (min !== undefined) {\n                if (max === undefined) {\n                    result += '≥';\n                }\n                result += min.toLocaleString();\n                if (max !== undefined) {\n                    result += ' - ';\n                }\n            }\n            else if (max !== undefined) {\n                result += '≤';\n            }\n            if (max !== undefined) {\n                result += max.toLocaleString();\n            }\n            result += ')';\n            return result;\n        }\n        else {\n            return '';\n        }\n    };\n    CircleSeriesComponent.prototype.getGradientStops = function (color) {\n        return [\n            {\n                offset: 0,\n                color: color,\n                opacity: 0.2\n            },\n            {\n                offset: 100,\n                color: color,\n                opacity: 1\n            }\n        ];\n    };\n    CircleSeriesComponent.prototype.onClick = function (value, label) {\n        this.select.emit({\n            name: label,\n            value: value\n        });\n    };\n    CircleSeriesComponent.prototype.isActive = function (entry) {\n        if (!this.activeEntries)\n            return false;\n        var item = this.activeEntries.find(function (d) {\n            return entry.name === d.name;\n        });\n        return item !== undefined;\n    };\n    CircleSeriesComponent.prototype.activateCircle = function () {\n        this.barVisible = true;\n        this.activate.emit({ name: this.data.name });\n    };\n    CircleSeriesComponent.prototype.deactivateCircle = function () {\n        this.barVisible = false;\n        this.circle.opacity = 0;\n        this.deactivate.emit({ name: this.data.name });\n    };\n    return CircleSeriesComponent;\n}());\nexport { CircleSeriesComponent };\n//# sourceMappingURL=circle-series.component.js.map\n",null]}