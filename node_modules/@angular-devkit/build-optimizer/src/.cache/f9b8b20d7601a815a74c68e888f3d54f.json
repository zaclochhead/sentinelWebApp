{"remainingRequest":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@nebular\\auth\\providers\\email-pass-auth.provider.js","dependencies":[{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@nebular\\auth\\providers\\email-pass-auth.provider.js","mtime":499162500000},{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527928412363},{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b)\n            if (b.hasOwnProperty(p))\n                d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { ActivatedRoute } from '@angular/router';\nimport { of as observableOf } from 'rxjs';\nimport { switchMap, map, catchError } from 'rxjs/operators';\nimport { NbAuthResult } from '../services/auth-result';\nimport { NbAbstractAuthProvider } from './abstract-auth.provider';\nimport { getDeepFromObject } from '../helpers';\n/**\n * The most common authentication provider for email/password strategy.\n *\n *\n * @example\n *\n * Default settings object:\n *\n * ```\n * {\n *  baseEndpoint: '',\n *  login: {\n *    alwaysFail: false,\n *    rememberMe: true,\n *    endpoint: '/api/auth/login',\n *    method: 'post',\n *    redirect: {\n *      success: '/',\n *      failure: null,\n *    },\n *    defaultErrors: ['Login/Email combination is not correct, please try again.'],\n *    defaultMessages: ['You have been successfully logged in.'],\n *  },\n *  register: {\n *    alwaysFail: false,\n *    rememberMe: true,\n *    endpoint: '/api/auth/register',\n *    method: 'post',\n *    redirect: {\n *      success: '/',\n *      failure: null,\n *    },\n *    defaultErrors: ['Something went wrong, please try again.'],\n *    defaultMessages: ['You have been successfully registered.'],\n *  },\n *  logout: {\n *    alwaysFail: false,\n *    endpoint: '/api/auth/logout',\n *    method: 'delete',\n *    redirect: {\n *      success: '/',\n *      failure: null,\n *    },\n *    defaultErrors: ['Something went wrong, please try again.'],\n *    defaultMessages: ['You have been successfully logged out.'],\n *  },\n *  requestPass: {\n *    endpoint: '/api/auth/request-pass',\n *    method: 'post',\n *    redirect: {\n *      success: '/',\n *      failure: null,\n *    },\n *    defaultErrors: ['Something went wrong, please try again.'],\n *    defaultMessages: ['Reset password instructions have been sent to your email.'],\n *  },\n *  resetPass: {\n *    endpoint: '/api/auth/reset-pass',\n *    method: 'put',\n *    redirect: {\n *      success: '/',\n *      failure: null,\n *    },\n *    resetPasswordTokenKey: 'reset_password_token',\n *    defaultErrors: ['Something went wrong, please try again.'],\n *    defaultMessages: ['Your password has been successfully changed.'],\n *  },\n *  refreshToken: {\n *    endpoint: '/api/auth/refresh-token',\n *    method: 'post',\n *    redirect: {\n *      success: null,\n *      failure: null,\n *    },\n *    defaultErrors: ['Something went wrong, please try again.'],\n *    defaultMessages: ['Your token has been successfully refreshed.'],\n *  },\n *  token: {\n *    key: 'data.token',\n *    getter: (module: string, res: HttpResponse<Object>) => getDeepFromObject(res.body,\n *      this.getConfigValue('token.key')),\n *  },\n *  errors: {\n *    key: 'data.errors',\n *    getter: (module: string, res: HttpErrorResponse) => getDeepFromObject(res.error,\n *      this.getConfigValue('errors.key'),\n *      this.getConfigValue(`${module}.defaultErrors`)),\n *  },\n *  messages: {\n *    key: 'data.messages',\n *    getter: (module: string, res: HttpResponse<Object>) => getDeepFromObject(res.body,\n *      this.getConfigValue('messages.key'),\n *      this.getConfigValue(`${module}.defaultMessages`)),\n *  },\n *}\n *\n * // Note, there is no need to copy over the whole object to change the settings you need.\n * // Also, this.getConfigValue call won't work outside ofthe default config declaration\n * // (which is inside of the `NbEmailPassAuthProvider` class), so you have to replace it with a custom helper function\n * // if you need it.\n * ```\n */\nvar NbEmailPassAuthProvider = /*@__PURE__*/ (function (_super) {\n    __extends(NbEmailPassAuthProvider, _super);\n    function NbEmailPassAuthProvider(http, route) {\n        var _this = _super.call(this) || this;\n        _this.http = http;\n        _this.route = route;\n        _this.defaultConfig = {\n            baseEndpoint: '/api/auth/',\n            login: {\n                alwaysFail: false,\n                rememberMe: true,\n                // TODO: what does that mean?\n                endpoint: 'login',\n                method: 'post',\n                redirect: {\n                    success: '/',\n                    failure: null,\n                },\n                defaultErrors: ['Login/Email combination is not correct, please try again.'],\n                defaultMessages: ['You have been successfully logged in.'],\n            },\n            register: {\n                alwaysFail: false,\n                rememberMe: true,\n                endpoint: 'register',\n                method: 'post',\n                redirect: {\n                    success: '/',\n                    failure: null,\n                },\n                defaultErrors: ['Something went wrong, please try again.'],\n                defaultMessages: ['You have been successfully registered.'],\n            },\n            logout: {\n                alwaysFail: false,\n                endpoint: 'logout',\n                method: 'delete',\n                redirect: {\n                    success: '/',\n                    failure: null,\n                },\n                defaultErrors: ['Something went wrong, please try again.'],\n                defaultMessages: ['You have been successfully logged out.'],\n            },\n            requestPass: {\n                endpoint: 'request-pass',\n                method: 'post',\n                redirect: {\n                    success: '/',\n                    failure: null,\n                },\n                defaultErrors: ['Something went wrong, please try again.'],\n                defaultMessages: ['Reset password instructions have been sent to your email.'],\n            },\n            resetPass: {\n                endpoint: 'reset-pass',\n                method: 'put',\n                redirect: {\n                    success: '/',\n                    failure: null,\n                },\n                resetPasswordTokenKey: 'reset_password_token',\n                defaultErrors: ['Something went wrong, please try again.'],\n                defaultMessages: ['Your password has been successfully changed.'],\n            },\n            refreshToken: {\n                endpoint: 'refresh-token',\n                method: 'post',\n                redirect: {\n                    success: null,\n                    failure: null,\n                },\n                defaultErrors: ['Something went wrong, please try again.'],\n                defaultMessages: ['Your token has been successfully refreshed.'],\n            },\n            token: {\n                key: 'data.token',\n                getter: function (module, res) {\n                    return getDeepFromObject(res.body, _this.getConfigValue('token.key'));\n                },\n            },\n            errors: {\n                key: 'data.errors',\n                getter: function (module, res) {\n                    return getDeepFromObject(res.error, _this.getConfigValue('errors.key'), _this.getConfigValue(module + \".defaultErrors\"));\n                },\n            },\n            messages: {\n                key: 'data.messages',\n                getter: function (module, res) {\n                    return getDeepFromObject(res.body, _this.getConfigValue('messages.key'), _this.getConfigValue(module + \".defaultMessages\"));\n                },\n            },\n        };\n        return _this;\n    }\n    NbEmailPassAuthProvider.prototype.authenticate = function (data) {\n        var _this = this;\n        var method = this.getConfigValue('login.method');\n        var url = this.getActionEndpoint('login');\n        return this.http.request(method, url, { body: data, observe: 'response' })\n            .pipe(map(function (res) {\n            if (_this.getConfigValue('login.alwaysFail')) {\n                throw _this.createFailResponse(data);\n            }\n            return res;\n        }), this.validateToken('login'), map(function (res) {\n            return new NbAuthResult(true, res, _this.getConfigValue('login.redirect.success'), [], _this.getConfigValue('messages.getter')('login', res), _this.getConfigValue('token.getter')('login', res));\n        }), catchError(function (res) {\n            var errors = [];\n            if (res instanceof HttpErrorResponse) {\n                errors = _this.getConfigValue('errors.getter')('login', res);\n            }\n            else {\n                errors.push('Something went wrong.');\n            }\n            return observableOf(new NbAuthResult(false, res, _this.getConfigValue('login.redirect.failure'), errors));\n        }));\n    };\n    NbEmailPassAuthProvider.prototype.register = function (data) {\n        var _this = this;\n        var method = this.getConfigValue('register.method');\n        var url = this.getActionEndpoint('register');\n        return this.http.request(method, url, { body: data, observe: 'response' })\n            .pipe(map(function (res) {\n            if (_this.getConfigValue('register.alwaysFail')) {\n                throw _this.createFailResponse(data);\n            }\n            return res;\n        }), this.validateToken('register'), map(function (res) {\n            return new NbAuthResult(true, res, _this.getConfigValue('register.redirect.success'), [], _this.getConfigValue('messages.getter')('register', res), _this.getConfigValue('token.getter')('register', res));\n        }), catchError(function (res) {\n            var errors = [];\n            if (res instanceof HttpErrorResponse) {\n                errors = _this.getConfigValue('errors.getter')('register', res);\n            }\n            else {\n                errors.push('Something went wrong.');\n            }\n            return observableOf(new NbAuthResult(false, res, _this.getConfigValue('register.redirect.failure'), errors));\n        }));\n    };\n    NbEmailPassAuthProvider.prototype.requestPassword = function (data) {\n        var _this = this;\n        var method = this.getConfigValue('requestPass.method');\n        var url = this.getActionEndpoint('requestPass');\n        return this.http.request(method, url, { body: data, observe: 'response' })\n            .pipe(map(function (res) {\n            if (_this.getConfigValue('requestPass.alwaysFail')) {\n                throw _this.createFailResponse();\n            }\n            return res;\n        }), map(function (res) {\n            return new NbAuthResult(true, res, _this.getConfigValue('requestPass.redirect.success'), [], _this.getConfigValue('messages.getter')('requestPass', res));\n        }), catchError(function (res) {\n            var errors = [];\n            if (res instanceof HttpErrorResponse) {\n                errors = _this.getConfigValue('errors.getter')('requestPass', res);\n            }\n            else {\n                errors.push('Something went wrong.');\n            }\n            return observableOf(new NbAuthResult(false, res, _this.getConfigValue('requestPass.redirect.failure'), errors));\n        }));\n    };\n    NbEmailPassAuthProvider.prototype.resetPassword = function (data) {\n        var _this = this;\n        if (data === void 0) {\n            data = {};\n        }\n        var tokenKey = this.getConfigValue('resetPass.resetPasswordTokenKey');\n        data[tokenKey] = this.route.snapshot.queryParams[tokenKey];\n        var method = this.getConfigValue('resetPass.method');\n        var url = this.getActionEndpoint('resetPass');\n        return this.http.request(method, url, { body: data, observe: 'response' })\n            .pipe(map(function (res) {\n            if (_this.getConfigValue('resetPass.alwaysFail')) {\n                throw _this.createFailResponse();\n            }\n            return res;\n        }), map(function (res) {\n            return new NbAuthResult(true, res, _this.getConfigValue('resetPass.redirect.success'), [], _this.getConfigValue('messages.getter')('resetPass', res));\n        }), catchError(function (res) {\n            var errors = [];\n            if (res instanceof HttpErrorResponse) {\n                errors = _this.getConfigValue('errors.getter')('resetPass', res);\n            }\n            else {\n                errors.push('Something went wrong.');\n            }\n            return observableOf(new NbAuthResult(false, res, _this.getConfigValue('resetPass.redirect.failure'), errors));\n        }));\n    };\n    NbEmailPassAuthProvider.prototype.logout = function () {\n        var _this = this;\n        var method = this.getConfigValue('logout.method');\n        var url = this.getActionEndpoint('logout');\n        return observableOf({})\n            .pipe(switchMap(function (res) {\n            if (!url) {\n                return observableOf(res);\n            }\n            return _this.http.request(method, url, { observe: 'response' });\n        }), map(function (res) {\n            if (_this.getConfigValue('logout.alwaysFail')) {\n                throw _this.createFailResponse();\n            }\n            return res;\n        }), map(function (res) {\n            return new NbAuthResult(true, res, _this.getConfigValue('logout.redirect.success'), [], _this.getConfigValue('messages.getter')('logout', res));\n        }), catchError(function (res) {\n            var errors = [];\n            if (res instanceof HttpErrorResponse) {\n                errors = _this.getConfigValue('errors.getter')('logout', res);\n            }\n            else {\n                errors.push('Something went wrong.');\n            }\n            return observableOf(new NbAuthResult(false, res, _this.getConfigValue('logout.redirect.failure'), errors));\n        }));\n    };\n    NbEmailPassAuthProvider.prototype.refreshToken = function (data) {\n        var _this = this;\n        var method = this.getConfigValue('refreshToken.method');\n        var url = this.getActionEndpoint('refreshToken');\n        return this.http.request(method, url, { body: data, observe: 'response' })\n            .pipe(map(function (res) {\n            if (_this.getConfigValue('refreshToken.alwaysFail')) {\n                throw _this.createFailResponse(data);\n            }\n            return res;\n        }), this.validateToken('refreshToken'), map(function (res) {\n            return new NbAuthResult(true, res, _this.getConfigValue('refreshToken.redirect.success'), [], _this.getConfigValue('messages.getter')('refreshToken', res), _this.getConfigValue('token.getter')('refreshToken', res));\n        }), catchError(function (res) {\n            var errors = [];\n            if (res instanceof HttpErrorResponse) {\n                errors = _this.getConfigValue('errors.getter')('refreshToken', res);\n            }\n            else {\n                errors.push('Something went wrong.');\n            }\n            return observableOf(new NbAuthResult(false, res, _this.getConfigValue('refreshToken.redirect.failure'), errors));\n        }));\n    };\n    NbEmailPassAuthProvider.prototype.validateToken = function (module) {\n        var _this = this;\n        return map(function (res) {\n            var token = _this.getConfigValue('token.getter')(module, res);\n            if (!token) {\n                var key = _this.getConfigValue('token.key');\n                console.warn(\"NbEmailPassAuthProvider:\\n                          Token is not provided under '\" + key + \"' key\\n                          with getter '\" + _this.getConfigValue('token.getter') + \"', check your auth configuration.\");\n                throw new Error('Could not extract token from the response.');\n            }\n            return res;\n        });\n    };\n    NbEmailPassAuthProvider.prototype.getActionEndpoint = function (action) {\n        var actionEndpoint = this.getConfigValue(action + \".endpoint\");\n        var baseEndpoint = this.getConfigValue('baseEndpoint');\n        return baseEndpoint + actionEndpoint;\n    };\n    return NbEmailPassAuthProvider;\n}(NbAbstractAuthProvider));\nexport { NbEmailPassAuthProvider };\n//# sourceMappingURL=email-pass-auth.provider.js.map\n",null]}