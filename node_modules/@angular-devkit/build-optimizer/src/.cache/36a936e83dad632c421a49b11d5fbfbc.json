{"remainingRequest":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@nebular\\auth\\services\\auth.service.js","dependencies":[{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@nebular\\auth\\services\\auth.service.js","mtime":499162500000},{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527928412363},{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["import { Inject, Injectable, Injector, Optional } from '@angular/core';\nimport { of as observableOf } from 'rxjs';\nimport { switchMap, map } from 'rxjs/operators';\nimport { NB_AUTH_PROVIDERS } from '../auth.options';\nimport { NbTokenService } from './token/token.service';\n/**\n * Common authentication service.\n * Should be used to as an interlayer between UI Components and Auth Providers.\n */\nvar NbAuthService = /*@__PURE__*/ (function () {\n    function NbAuthService(tokenService, injector, providers) {\n        if (providers === void 0) {\n            providers = {};\n        }\n        this.tokenService = tokenService;\n        this.injector = injector;\n        this.providers = providers;\n    }\n    /**\n     * Retrieves current authenticated token stored\n     * @returns {Observable<any>}\n     */\n    /**\n       * Retrieves current authenticated token stored\n       * @returns {Observable<any>}\n       */\n    NbAuthService.prototype.getToken = /**\n       * Retrieves current authenticated token stored\n       * @returns {Observable<any>}\n       */\n        function () {\n            return this.tokenService.get();\n        };\n    /**\n     * Returns true if auth token is presented in the token storage\n     * @returns {Observable<any>}\n     */\n    /**\n       * Returns true if auth token is presented in the token storage\n       * @returns {Observable<any>}\n       */\n    NbAuthService.prototype.isAuthenticated = /**\n       * Returns true if auth token is presented in the token storage\n       * @returns {Observable<any>}\n       */\n        function () {\n            return this.getToken()\n                .pipe(map(function (token) { return token.isValid(); }));\n        };\n    /**\n     * Returns tokens stream\n     * @returns {Observable<NbAuthSimpleToken>}\n     */\n    /**\n       * Returns tokens stream\n       * @returns {Observable<NbAuthSimpleToken>}\n       */\n    NbAuthService.prototype.onTokenChange = /**\n       * Returns tokens stream\n       * @returns {Observable<NbAuthSimpleToken>}\n       */\n        function () {\n            return this.tokenService.tokenChange();\n        };\n    /**\n     * Returns authentication status stream\n     * @returns {Observable<boolean>}\n     */\n    /**\n       * Returns authentication status stream\n       * @returns {Observable<boolean>}\n       */\n    NbAuthService.prototype.onAuthenticationChange = /**\n       * Returns authentication status stream\n       * @returns {Observable<boolean>}\n       */\n        function () {\n            return this.onTokenChange()\n                .pipe(map(function (token) { return token.isValid(); }));\n        };\n    /**\n     * Authenticates with the selected provider\n     * Stores received token in the token storage\n     *\n     * Example:\n     * authenticate('email', {email: 'email@example.com', password: 'test'})\n     *\n     * @param provider\n     * @param data\n     * @returns {Observable<NbAuthResult>}\n     */\n    /**\n       * Authenticates with the selected provider\n       * Stores received token in the token storage\n       *\n       * Example:\n       * authenticate('email', {email: 'email@example.com', password: 'test'})\n       *\n       * @param provider\n       * @param data\n       * @returns {Observable<NbAuthResult>}\n       */\n    NbAuthService.prototype.authenticate = /**\n       * Authenticates with the selected provider\n       * Stores received token in the token storage\n       *\n       * Example:\n       * authenticate('email', {email: 'email@example.com', password: 'test'})\n       *\n       * @param provider\n       * @param data\n       * @returns {Observable<NbAuthResult>}\n       */\n        function (provider, data) {\n            var _this = this;\n            return this.getProvider(provider).authenticate(data)\n                .pipe(switchMap(function (result) {\n                return _this.processResultToken(result);\n            }));\n        };\n    /**\n     * Registers with the selected provider\n     * Stores received token in the token storage\n     *\n     * Example:\n     * register('email', {email: 'email@example.com', name: 'Some Name', password: 'test'})\n     *\n     * @param provider\n     * @param data\n     * @returns {Observable<NbAuthResult>}\n     */\n    /**\n       * Registers with the selected provider\n       * Stores received token in the token storage\n       *\n       * Example:\n       * register('email', {email: 'email@example.com', name: 'Some Name', password: 'test'})\n       *\n       * @param provider\n       * @param data\n       * @returns {Observable<NbAuthResult>}\n       */\n    NbAuthService.prototype.register = /**\n       * Registers with the selected provider\n       * Stores received token in the token storage\n       *\n       * Example:\n       * register('email', {email: 'email@example.com', name: 'Some Name', password: 'test'})\n       *\n       * @param provider\n       * @param data\n       * @returns {Observable<NbAuthResult>}\n       */\n        function (provider, data) {\n            var _this = this;\n            return this.getProvider(provider).register(data)\n                .pipe(switchMap(function (result) {\n                return _this.processResultToken(result);\n            }));\n        };\n    /**\n     * Sign outs with the selected provider\n     * Removes token from the token storage\n     *\n     * Example:\n     * logout('email')\n     *\n     * @param provider\n     * @returns {Observable<NbAuthResult>}\n     */\n    /**\n       * Sign outs with the selected provider\n       * Removes token from the token storage\n       *\n       * Example:\n       * logout('email')\n       *\n       * @param provider\n       * @returns {Observable<NbAuthResult>}\n       */\n    NbAuthService.prototype.logout = /**\n       * Sign outs with the selected provider\n       * Removes token from the token storage\n       *\n       * Example:\n       * logout('email')\n       *\n       * @param provider\n       * @returns {Observable<NbAuthResult>}\n       */\n        function (provider) {\n            var _this = this;\n            return this.getProvider(provider).logout()\n                .pipe(switchMap(function (result) {\n                if (result.isSuccess()) {\n                    _this.tokenService.clear()\n                        .pipe(map(function () { return result; }));\n                }\n                return observableOf(result);\n            }));\n        };\n    /**\n     * Sends forgot password request to the selected provider\n     *\n     * Example:\n     * requestPassword('email', {email: 'email@example.com'})\n     *\n     * @param provider\n     * @param data\n     * @returns {Observable<NbAuthResult>}\n     */\n    /**\n       * Sends forgot password request to the selected provider\n       *\n       * Example:\n       * requestPassword('email', {email: 'email@example.com'})\n       *\n       * @param provider\n       * @param data\n       * @returns {Observable<NbAuthResult>}\n       */\n    NbAuthService.prototype.requestPassword = /**\n       * Sends forgot password request to the selected provider\n       *\n       * Example:\n       * requestPassword('email', {email: 'email@example.com'})\n       *\n       * @param provider\n       * @param data\n       * @returns {Observable<NbAuthResult>}\n       */\n        function (provider, data) {\n            return this.getProvider(provider).requestPassword(data);\n        };\n    /**\n     * Tries to reset password with the selected provider\n     *\n     * Example:\n     * resetPassword('email', {newPassword: 'test'})\n     *\n     * @param provider\n     * @param data\n     * @returns {Observable<NbAuthResult>}\n     */\n    /**\n       * Tries to reset password with the selected provider\n       *\n       * Example:\n       * resetPassword('email', {newPassword: 'test'})\n       *\n       * @param provider\n       * @param data\n       * @returns {Observable<NbAuthResult>}\n       */\n    NbAuthService.prototype.resetPassword = /**\n       * Tries to reset password with the selected provider\n       *\n       * Example:\n       * resetPassword('email', {newPassword: 'test'})\n       *\n       * @param provider\n       * @param data\n       * @returns {Observable<NbAuthResult>}\n       */\n        function (provider, data) {\n            return this.getProvider(provider).resetPassword(data);\n        };\n    /**\n     * Sends a refresh token request\n     * Stores received token in the token storage\n     *\n     * Example:\n     * authenticate('email', {email: 'email@example.com', password: 'test'})\n     *\n     * @param {string} provider\n     * @param data\n     * @returns {Observable<NbAuthResult>}\n     */\n    /**\n       * Sends a refresh token request\n       * Stores received token in the token storage\n       *\n       * Example:\n       * authenticate('email', {email: 'email@example.com', password: 'test'})\n       *\n       * @param {string} provider\n       * @param data\n       * @returns {Observable<NbAuthResult>}\n       */\n    NbAuthService.prototype.refreshToken = /**\n       * Sends a refresh token request\n       * Stores received token in the token storage\n       *\n       * Example:\n       * authenticate('email', {email: 'email@example.com', password: 'test'})\n       *\n       * @param {string} provider\n       * @param data\n       * @returns {Observable<NbAuthResult>}\n       */\n        function (provider, data) {\n            var _this = this;\n            return this.getProvider(provider).refreshToken()\n                .pipe(switchMap(function (result) {\n                return _this.processResultToken(result);\n            }));\n        };\n    /**\n     * Gets the selected provider\n     *\n     * Example:\n     * getProvider('email')\n     *\n     * @param {string} provider\n     * @returns {NbAbstractAuthProvider}\n     */\n    /**\n       * Gets the selected provider\n       *\n       * Example:\n       * getProvider('email')\n       *\n       * @param {string} provider\n       * @returns {NbAbstractAuthProvider}\n       */\n    NbAuthService.prototype.getProvider = /**\n       * Gets the selected provider\n       *\n       * Example:\n       * getProvider('email')\n       *\n       * @param {string} provider\n       * @returns {NbAbstractAuthProvider}\n       */\n        function (provider) {\n            if (!this.providers[provider]) {\n                throw new TypeError(\"Nb auth provider '\" + provider + \"' is not registered\");\n            }\n            return this.injector.get(this.providers[provider].service);\n        };\n    NbAuthService.prototype.processResultToken = function (result) {\n        var _this = this;\n        if (result.isSuccess() && result.getRawToken()) {\n            return this.tokenService.setRaw(result.getRawToken())\n                .pipe(switchMap(function () { return _this.tokenService.get(); }), map(function (token) {\n                result.setToken(token);\n                return result;\n            }));\n        }\n        return observableOf(result);\n    };\n    return NbAuthService;\n}());\nexport { NbAuthService };\n//# sourceMappingURL=auth.service.js.map\n",null]}