{"remainingRequest":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\ng2-tree\\src\\tree-internal.component.js","dependencies":[{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\ng2-tree\\src\\tree-internal.component.js","mtime":1511605106000},{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527928412363},{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar TreeTypes = require(\"./tree.types\");\nvar tree_1 = require(\"./tree\");\nvar tree_controller_1 = require(\"./tree-controller\");\nvar node_menu_service_1 = require(\"./menu/node-menu.service\");\nvar menu_events_1 = require(\"./menu/menu.events\");\nvar editable_events_1 = require(\"./editable/editable.events\");\nvar tree_service_1 = require(\"./tree.service\");\nvar EventUtils = require(\"./utils/event.utils\");\nvar fn_utils_1 = require(\"./utils/fn.utils\");\nvar TreeInternalComponent = /*@__PURE__*/ (function () {\n    function TreeInternalComponent(nodeMenuService, treeService, element) {\n        this.nodeMenuService = nodeMenuService;\n        this.treeService = treeService;\n        this.element = element;\n        this.isSelected = false;\n        this.isRightMenuVisible = false;\n        this.isLeftMenuVisible = false;\n        this.subscriptions = [];\n    }\n    TreeInternalComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        this.controller = new tree_controller_1.TreeController(this);\n        if (fn_utils_1.get(this.tree, 'node.id', '')) {\n            this.treeService.setController(this.tree.node.id, this.controller);\n        }\n        this.settings = this.settings || { rootIsVisible: true };\n        this.subscriptions.push(this.nodeMenuService.hideMenuStream(this.element)\n            .subscribe(function () {\n            _this.isRightMenuVisible = false;\n            _this.isLeftMenuVisible = false;\n        }));\n        this.subscriptions.push(this.treeService.unselectStream(this.tree)\n            .subscribe(function () { return _this.isSelected = false; }));\n        this.subscriptions.push(this.treeService.draggedStream(this.tree, this.element)\n            .subscribe(function (e) {\n            if (_this.tree.hasSibling(e.captured.tree)) {\n                _this.swapWithSibling(e.captured.tree, _this.tree);\n            }\n            else if (_this.tree.isBranch()) {\n                _this.moveNodeToThisTreeAndRemoveFromPreviousOne(e, _this.tree);\n            }\n            else {\n                _this.moveNodeToParentTreeAndRemoveFromPreviousOne(e, _this.tree);\n            }\n        }));\n    };\n    TreeInternalComponent.prototype.ngOnChanges = function (changes) {\n        this.controller = new tree_controller_1.TreeController(this);\n    };\n    TreeInternalComponent.prototype.ngOnDestroy = function () {\n        if (fn_utils_1.get(this.tree, 'node.id', '')) {\n            this.treeService.deleteController(this.tree.node.id);\n        }\n        this.subscriptions.forEach(function (sub) { return sub && sub.unsubscribe(); });\n    };\n    TreeInternalComponent.prototype.swapWithSibling = function (sibling, tree) {\n        tree.swapWithSibling(sibling);\n        this.treeService.fireNodeMoved(sibling, sibling.parent);\n    };\n    TreeInternalComponent.prototype.moveNodeToThisTreeAndRemoveFromPreviousOne = function (e, tree) {\n        this.treeService.fireNodeRemoved(e.captured.tree);\n        var addedChild = tree.addChild(e.captured.tree);\n        this.treeService.fireNodeMoved(addedChild, e.captured.tree.parent);\n    };\n    TreeInternalComponent.prototype.moveNodeToParentTreeAndRemoveFromPreviousOne = function (e, tree) {\n        this.treeService.fireNodeRemoved(e.captured.tree);\n        var addedSibling = tree.addSibling(e.captured.tree, tree.positionInParent);\n        this.treeService.fireNodeMoved(addedSibling, e.captured.tree.parent);\n    };\n    TreeInternalComponent.prototype.onNodeSelected = function (e) {\n        if (EventUtils.isLeftButtonClicked(e)) {\n            this.isSelected = true;\n            this.treeService.fireNodeSelected(this.tree);\n        }\n    };\n    TreeInternalComponent.prototype.showRightMenu = function (e) {\n        if (!this.tree.hasRightMenu()) {\n            return;\n        }\n        if (EventUtils.isRightButtonClicked(e)) {\n            this.isRightMenuVisible = !this.isRightMenuVisible;\n            this.nodeMenuService.hideMenuForAllNodesExcept(this.element);\n        }\n        e.preventDefault();\n    };\n    TreeInternalComponent.prototype.showLeftMenu = function (e) {\n        if (!this.tree.hasLeftMenu()) {\n            return;\n        }\n        if (EventUtils.isLeftButtonClicked(e)) {\n            this.isLeftMenuVisible = !this.isLeftMenuVisible;\n            this.nodeMenuService.hideMenuForAllNodesExcept(this.element);\n            if (this.isLeftMenuVisible) {\n                e.preventDefault();\n            }\n        }\n    };\n    TreeInternalComponent.prototype.onMenuItemSelected = function (e) {\n        switch (e.nodeMenuItemAction) {\n            case menu_events_1.NodeMenuItemAction.NewTag:\n                this.onNewSelected(e);\n                break;\n            case menu_events_1.NodeMenuItemAction.NewFolder:\n                this.onNewSelected(e);\n                break;\n            case menu_events_1.NodeMenuItemAction.Rename:\n                this.onRenameSelected();\n                break;\n            case menu_events_1.NodeMenuItemAction.Remove:\n                this.onRemoveSelected();\n                break;\n            case menu_events_1.NodeMenuItemAction.Custom:\n                this.treeService.fireMenuItemSelected(this.tree, e.nodeMenuItemSelected);\n                break;\n            default:\n                throw new Error(\"Chosen menu item doesn't exist\");\n        }\n    };\n    TreeInternalComponent.prototype.onNewSelected = function (e) {\n        this.tree.createNode(e.nodeMenuItemAction === menu_events_1.NodeMenuItemAction.NewFolder);\n        this.isRightMenuVisible = false;\n        this.isLeftMenuVisible = false;\n    };\n    TreeInternalComponent.prototype.onRenameSelected = function () {\n        this.tree.markAsBeingRenamed();\n        this.isRightMenuVisible = false;\n        this.isLeftMenuVisible = false;\n    };\n    TreeInternalComponent.prototype.onRemoveSelected = function () {\n        this.treeService.deleteController(fn_utils_1.get(this.tree, 'node.id', ''));\n        this.treeService.fireNodeRemoved(this.tree);\n    };\n    TreeInternalComponent.prototype.onSwitchFoldingType = function () {\n        this.tree.switchFoldingType();\n        this.treeService.fireNodeSwitchFoldingType(this.tree);\n    };\n    TreeInternalComponent.prototype.applyNewValue = function (e) {\n        if ((e.action === editable_events_1.NodeEditableEventAction.Cancel || this.tree.isNew()) && tree_1.Tree.isValueEmpty(e.value)) {\n            return this.treeService.fireNodeRemoved(this.tree);\n        }\n        if (this.tree.isNew()) {\n            this.tree.value = e.value;\n            this.treeService.fireNodeCreated(this.tree);\n        }\n        if (this.tree.isBeingRenamed()) {\n            var oldValue = this.tree.value;\n            this.tree.value = e.value;\n            this.treeService.fireNodeRenamed(oldValue, this.tree);\n        }\n        this.tree.markAsModified();\n    };\n    TreeInternalComponent.prototype.shouldShowInputForTreeValue = function () {\n        return this.tree.isNew() || this.tree.isBeingRenamed();\n    };\n    TreeInternalComponent.prototype.isRootHidden = function () {\n        return this.tree.isRoot() && !this.settings.rootIsVisible;\n    };\n    TreeInternalComponent.prototype.hasCustomMenu = function () {\n        return this.tree.hasCustomMenu();\n    };\n    TreeInternalComponent.decorators = [\n        { type: core_1.Component, args: [{\n                    selector: 'tree-internal',\n                    template: \"\\n  <ul class=\\\"tree\\\" *ngIf=\\\"tree\\\" [ngClass]=\\\"{rootless: isRootHidden()}\\\">\\n    <li>\\n      <div class=\\\"value-container\\\"\\n        [ngClass]=\\\"{rootless: isRootHidden()}\\\"\\n        [class.selected]=\\\"isSelected\\\"\\n        (contextmenu)=\\\"showRightMenu($event)\\\"\\n        [nodeDraggable]=\\\"element\\\"\\n        [tree]=\\\"tree\\\">\\n\\n        <div class=\\\"folding\\\" (click)=\\\"onSwitchFoldingType()\\\" [ngClass]=\\\"tree.foldingCssClass\\\"></div>\\n        <div class=\\\"node-value\\\"\\n          *ngIf=\\\"!shouldShowInputForTreeValue()\\\"\\n          [class.node-selected]=\\\"isSelected\\\"\\n          (click)=\\\"onNodeSelected($event)\\\">\\n            <div *ngIf=\\\"tree.nodeTemplate\\\" class=\\\"node-template\\\" [innerHTML]=\\\"tree.nodeTemplate | safeHtml\\\"></div>\\n            <span *ngIf=\\\"!template\\\" class=\\\"node-name\\\" [innerHTML]=\\\"tree.value | safeHtml\\\"></span>\\n            <span class=\\\"loading-children\\\" *ngIf=\\\"tree.childrenAreBeingLoaded()\\\"></span>\\n            <ng-template [ngTemplateOutlet]=\\\"template\\\" [ngTemplateOutletContext]=\\\"{ $implicit: tree.node }\\\"></ng-template>\\n        </div>\\n\\n        <input type=\\\"text\\\" class=\\\"node-value\\\"\\n           *ngIf=\\\"shouldShowInputForTreeValue()\\\"\\n           [nodeEditable]=\\\"tree.value\\\"\\n           (valueChanged)=\\\"applyNewValue($event)\\\"/>\\n\\n        <div class=\\\"node-left-menu\\\" *ngIf=\\\"tree.hasLeftMenu()\\\" (click)=\\\"showLeftMenu($event)\\\" [innerHTML]=\\\"tree.leftMenuTemplate\\\">\\n        </div>\\n        <node-menu *ngIf=\\\"tree.hasLeftMenu() && isLeftMenuVisible && !hasCustomMenu()\\\"\\n          (menuItemSelected)=\\\"onMenuItemSelected($event)\\\">\\n        </node-menu>\\n      </div>\\n\\n      <node-menu *ngIf=\\\"isRightMenuVisible && !hasCustomMenu()\\\"\\n           (menuItemSelected)=\\\"onMenuItemSelected($event)\\\">\\n      </node-menu>\\n\\n      <node-menu *ngIf=\\\"hasCustomMenu() && (isRightMenuVisible || isLeftMenuVisible)\\\"\\n           [menuItems]=\\\"tree.menuItems\\\"\\n           (menuItemSelected)=\\\"onMenuItemSelected($event)\\\">\\n      </node-menu>\\n      <ng-template [ngIf]=\\\"tree.isNodeExpanded()\\\">\\n        <tree-internal *ngFor=\\\"let child of tree.childrenAsync | async\\\" [tree]=\\\"child\\\" [template]=\\\"template\\\"></tree-internal>\\n      </ng-template>\\n    </li>\\n  </ul>\\n  \"\n                },] },\n    ];\n    TreeInternalComponent.propDecorators = {\n        \"tree\": [{ type: core_1.Input },],\n        \"settings\": [{ type: core_1.Input },],\n        \"template\": [{ type: core_1.Input },],\n    };\n    return TreeInternalComponent;\n}());\nexports.TreeInternalComponent = TreeInternalComponent;\n",null]}