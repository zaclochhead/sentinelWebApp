{"remainingRequest":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@nebular\\security\\services\\acl.service.js","dependencies":[{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@nebular\\security\\services\\acl.service.js","mtime":499162500000},{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527928412363},{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["import { Inject, Injectable, Optional } from '@angular/core';\nimport { NB_SECURITY_OPTIONS_TOKEN } from '../security.options';\nvar shallowObjectClone = function (o) { return Object.assign({}, o); };\nvar ɵ0 = shallowObjectClone;\nvar shallowArrayClone = function (a) { return Object.assign([], a); };\nvar ɵ1 = shallowArrayClone;\nvar popParent = function (abilities) {\n    var parent = abilities['parent'];\n    delete abilities['parent'];\n    return parent;\n};\nvar ɵ2 = popParent;\n/**\n * Common acl service.\n */\nvar NbAclService = /*@__PURE__*/ (function () {\n    function NbAclService(settings) {\n        if (settings === void 0) {\n            settings = {};\n        }\n        this.settings = settings;\n        this.state = {};\n        if (settings.accessControl) {\n            this.setAccessControl(settings.accessControl);\n        }\n    }\n    /**\n     * Set/Reset ACL list\n     * @param {NbAccessControl} list\n     */\n    /**\n       * Set/Reset ACL list\n       * @param {NbAccessControl} list\n       */\n    NbAclService.prototype.setAccessControl = /**\n       * Set/Reset ACL list\n       * @param {NbAccessControl} list\n       */\n        function (list) {\n            for (var _i = 0, _a = Object.entries(list); _i < _a.length; _i++) {\n                var _b = _a[_i], role = _b[0], value = _b[1];\n                var abilities = shallowObjectClone(value);\n                var parent_1 = popParent(abilities);\n                this.register(role, parent_1, abilities);\n            }\n        };\n    /**\n     * Register a new role with a list of abilities (permission/resources combinations)\n     * @param {string} role\n     * @param {string} parent\n     * @param {[permission: string]: string|string[]} abilities\n     */\n    /**\n       * Register a new role with a list of abilities (permission/resources combinations)\n       * @param {string} role\n       * @param {string} parent\n       * @param {[permission: string]: string|string[]} abilities\n       */\n    NbAclService.prototype.register = /**\n       * Register a new role with a list of abilities (permission/resources combinations)\n       * @param {string} role\n       * @param {string} parent\n       * @param {[permission: string]: string|string[]} abilities\n       */\n        function (role, parent, abilities) {\n            if (parent === void 0) {\n                parent = null;\n            }\n            if (abilities === void 0) {\n                abilities = {};\n            }\n            this.validateRole(role);\n            this.state[role] = {\n                parent: parent,\n            };\n            for (var _i = 0, _a = Object.entries(abilities); _i < _a.length; _i++) {\n                var _b = _a[_i], permission = _b[0], value = _b[1];\n                var resources = typeof value === 'string' ? [value] : value;\n                this.allow(role, permission, shallowArrayClone(resources));\n            }\n        };\n    /**\n     * Allow a permission for specific resources to a role\n     * @param {string} role\n     * @param {string} permission\n     * @param {string | string[]} resource\n     */\n    /**\n       * Allow a permission for specific resources to a role\n       * @param {string} role\n       * @param {string} permission\n       * @param {string | string[]} resource\n       */\n    NbAclService.prototype.allow = /**\n       * Allow a permission for specific resources to a role\n       * @param {string} role\n       * @param {string} permission\n       * @param {string | string[]} resource\n       */\n        function (role, permission, resource) {\n            this.validateRole(role);\n            if (!this.getRole(role)) {\n                this.register(role, null, {});\n            }\n            resource = typeof resource === 'string' ? [resource] : resource;\n            var resources = shallowArrayClone(this.getRoleResources(role, permission));\n            resources = resources.concat(resource);\n            this.state[role][permission] = resources\n                .filter(function (item, pos) { return resources.indexOf(item) === pos; });\n        };\n    /**\n     * Check whether the role has a permission to a resource\n     * @param {string} role\n     * @param {string} permission\n     * @param {string} resource\n     * @returns {boolean}\n     */\n    /**\n       * Check whether the role has a permission to a resource\n       * @param {string} role\n       * @param {string} permission\n       * @param {string} resource\n       * @returns {boolean}\n       */\n    NbAclService.prototype.can = /**\n       * Check whether the role has a permission to a resource\n       * @param {string} role\n       * @param {string} permission\n       * @param {string} resource\n       * @returns {boolean}\n       */\n        function (role, permission, resource) {\n            this.validateResource(resource);\n            var parentRole = this.getRoleParent(role);\n            var parentCan = parentRole && this.can(this.getRoleParent(role), permission, resource);\n            return parentCan || this.exactCan(role, permission, resource);\n        };\n    NbAclService.prototype.getRole = function (role) {\n        return this.state[role];\n    };\n    NbAclService.prototype.validateRole = function (role) {\n        if (!role) {\n            throw new Error('NbAclService: role name cannot be empty');\n        }\n    };\n    NbAclService.prototype.validateResource = function (resource) {\n        if (!resource || [NbAclService.ANY_RESOURCE].includes(resource)) {\n            throw new Error(\"NbAclService: cannot use empty or bulk '*' resource placeholder with 'can' method\");\n        }\n    };\n    NbAclService.prototype.exactCan = function (role, permission, resource) {\n        var resources = this.getRoleResources(role, permission);\n        return resources.includes(resource) || resources.includes(NbAclService.ANY_RESOURCE);\n    };\n    NbAclService.prototype.getRoleResources = function (role, permission) {\n        return this.getRoleAbilities(role)[permission] || [];\n    };\n    NbAclService.prototype.getRoleAbilities = function (role) {\n        var abilities = shallowObjectClone(this.state[role] || {});\n        popParent(shallowObjectClone(this.state[role] || {}));\n        return abilities;\n    };\n    NbAclService.prototype.getRoleParent = function (role) {\n        return this.state[role] ? this.state[role]['parent'] : null;\n    };\n    NbAclService.ANY_RESOURCE = '*';\n    return NbAclService;\n}());\nexport { NbAclService };\nexport { ɵ0, ɵ1, ɵ2 };\n//# sourceMappingURL=acl.service.js.map\n",null]}