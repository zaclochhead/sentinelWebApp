{"remainingRequest":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@nebular\\auth\\helpers.js","dependencies":[{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@nebular\\auth\\helpers.js","mtime":499162500000},{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527928412363},{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["/**\n * Extending object that entered in first argument.\n *\n * Returns extended object or false if have no target object or incorrect type.\n *\n * If you wish to clone source object (without modify it), just use empty new\n * object as first argument, like this:\n *   deepExtend({}, yourObj_1, [yourObj_N]);\n */\nexport var deepExtend = function () {\n    var objects = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        objects[_i] = arguments[_i];\n    }\n    if (arguments.length < 1 || typeof arguments[0] !== 'object') {\n        return false;\n    }\n    if (arguments.length < 2) {\n        return arguments[0];\n    }\n    var target = arguments[0];\n    // convert arguments to array and cut off target object\n    var args = Array.prototype.slice.call(arguments, 1);\n    var val, src;\n    args.forEach(function (obj) {\n        // skip argument if it is array or isn't object\n        if (typeof obj !== 'object' || Array.isArray(obj)) {\n            return;\n        }\n        Object.keys(obj).forEach(function (key) {\n            src = target[key]; // source value\n            val = obj[key]; // new value\n            // recursion prevention\n            if (val === target) {\n                return;\n                /**\n                         * if new value isn't object then just overwrite by new value\n                         * instead of extending.\n                         */\n            }\n            else if (typeof val !== 'object' || val === null) {\n                target[key] = val;\n                return;\n                // just clone arrays (and recursive clone objects inside)\n            }\n            else if (Array.isArray(val)) {\n                target[key] = deepCloneArray(val);\n                return;\n                // custom cloning and overwrite for specific objects\n            }\n            else if (isSpecificValue(val)) {\n                target[key] = cloneSpecificValue(val);\n                return;\n                // overwrite by new value if source isn't object or array\n            }\n            else if (typeof src !== 'object' || src === null || Array.isArray(src)) {\n                target[key] = deepExtend({}, val);\n                return;\n                // source value and new value is objects both, extending...\n            }\n            else {\n                target[key] = deepExtend(src, val);\n                return;\n            }\n        });\n    });\n    return target;\n};\nfunction isSpecificValue(val) {\n    return (val instanceof Date\n        || val instanceof RegExp) ? true : false;\n}\nfunction cloneSpecificValue(val) {\n    if (val instanceof Date) {\n        return new Date(val.getTime());\n    }\n    else if (val instanceof RegExp) {\n        return new RegExp(val);\n    }\n    else {\n        throw new Error('cloneSpecificValue: Unexpected situation');\n    }\n}\n/**\n * Recursive cloning array.\n */\nfunction deepCloneArray(arr) {\n    var clone = [];\n    arr.forEach(function (item, index) {\n        if (typeof item === 'object' && item !== null) {\n            if (Array.isArray(item)) {\n                clone[index] = deepCloneArray(item);\n            }\n            else if (isSpecificValue(item)) {\n                clone[index] = cloneSpecificValue(item);\n            }\n            else {\n                clone[index] = deepExtend({}, item);\n            }\n        }\n        else {\n            clone[index] = item;\n        }\n    });\n    return clone;\n}\n// getDeepFromObject({result: {data: 1}}, 'result.data', 2); // returns 1\nexport function getDeepFromObject(object, name, defaultValue) {\n    if (object === void 0) { object = {}; }\n    var keys = name.split('.');\n    // clone the object\n    var level = deepExtend({}, object || {});\n    keys.forEach(function (k) {\n        if (level && typeof level[k] !== 'undefined') {\n            level = level[k];\n        }\n        else {\n            level = undefined;\n        }\n    });\n    return typeof level === 'undefined' ? defaultValue : level;\n}\nexport function urlBase64Decode(str) {\n    var output = str.replace(/-/g, '+').replace(/_/g, '/');\n    switch (output.length % 4) {\n        case 0: {\n            break;\n        }\n        case 2: {\n            output += '==';\n            break;\n        }\n        case 3: {\n            output += '=';\n            break;\n        }\n        default: {\n            throw new Error('Illegal base64url string!');\n        }\n    }\n    return b64DecodeUnicode(output);\n}\nexport function b64decode(str) {\n    var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n    var output = '';\n    str = String(str).replace(/=+$/, '');\n    if (str.length % 4 === 1) {\n        throw new Error(\"'atob' failed: The string to be decoded is not correctly encoded.\");\n    }\n    for (\n    // initialize result and counters\n    var bc = 0, bs = void 0, buffer = void 0, idx = 0; \n    // get next character\n    buffer = str.charAt(idx++); \n    // character found in table? initialize bit storage and add its ascii value;\n    ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,\n        // and if not first of each 4 characters,\n        // convert the first 8 bits to one ascii character\n        bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0) {\n        // try to find character in table (0-63, not found => -1)\n        buffer = chars.indexOf(buffer);\n    }\n    return output;\n}\n// https://developer.mozilla.org/en/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#The_Unicode_Problem\nexport function b64DecodeUnicode(str) {\n    return decodeURIComponent(Array.prototype.map.call(b64decode(str), function (c) {\n        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n    }).join(''));\n}\n//# sourceMappingURL=helpers.js.map",null]}