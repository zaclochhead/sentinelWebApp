{"remainingRequest":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\ng2-tree\\src\\tree.service.js","dependencies":[{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\ng2-tree\\src\\tree.service.js","mtime":1511605106000},{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527928412363},{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tree_events_1 = require(\"./tree.events\");\nvar Subject_1 = require(\"rxjs/Subject\");\nvar core_1 = require(\"@angular/core\");\nvar node_draggable_service_1 = require(\"./draggable/node-draggable.service\");\nvar fn_utils_1 = require(\"./utils/fn.utils\");\nvar TreeService = /*@__PURE__*/ (function () {\n    function TreeService(nodeDraggableService) {\n        this.nodeDraggableService = nodeDraggableService;\n        this.nodeMoved$ = new Subject_1.Subject();\n        this.nodeRemoved$ = new Subject_1.Subject();\n        this.nodeRenamed$ = new Subject_1.Subject();\n        this.nodeCreated$ = new Subject_1.Subject();\n        this.nodeSelected$ = new Subject_1.Subject();\n        this.nodeExpanded$ = new Subject_1.Subject();\n        this.nodeCollapsed$ = new Subject_1.Subject();\n        this.menuItemSelected$ = new Subject_1.Subject();\n        this.loadNextLevel$ = new Subject_1.Subject();\n        this.controllers = new Map();\n        this.nodeRemoved$.subscribe(function (e) { return e.node.removeItselfFromParent(); });\n    }\n    TreeService.prototype.unselectStream = function (tree) {\n        return this.nodeSelected$.filter(function (e) { return tree !== e.node; });\n    };\n    TreeService.prototype.fireNodeRemoved = function (tree) {\n        this.nodeRemoved$.next(new tree_events_1.NodeRemovedEvent(tree, tree.positionInParent));\n    };\n    TreeService.prototype.fireNodeCreated = function (tree) {\n        this.nodeCreated$.next(new tree_events_1.NodeCreatedEvent(tree));\n    };\n    TreeService.prototype.fireNodeSelected = function (tree) {\n        this.nodeSelected$.next(new tree_events_1.NodeSelectedEvent(tree));\n    };\n    TreeService.prototype.fireNodeRenamed = function (oldValue, tree) {\n        this.nodeRenamed$.next(new tree_events_1.NodeRenamedEvent(tree, oldValue, tree.value));\n    };\n    TreeService.prototype.fireNodeMoved = function (tree, parent) {\n        this.nodeMoved$.next(new tree_events_1.NodeMovedEvent(tree, parent));\n    };\n    TreeService.prototype.fireMenuItemSelected = function (tree, selectedItem) {\n        this.menuItemSelected$.next(new tree_events_1.MenuItemSelectedEvent(tree, selectedItem));\n    };\n    TreeService.prototype.fireNodeSwitchFoldingType = function (tree) {\n        if (tree.isNodeExpanded()) {\n            this.fireNodeExpanded(tree);\n            if (this.shouldFireLoadNextLevel(tree)) {\n                this.fireLoadNextLevel(tree);\n            }\n        }\n        else if (tree.isNodeCollapsed()) {\n            this.fireNodeCollapsed(tree);\n        }\n    };\n    TreeService.prototype.fireNodeExpanded = function (tree) {\n        this.nodeExpanded$.next(new tree_events_1.NodeExpandedEvent(tree));\n    };\n    TreeService.prototype.fireNodeCollapsed = function (tree) {\n        this.nodeCollapsed$.next(new tree_events_1.NodeCollapsedEvent(tree));\n    };\n    TreeService.prototype.fireLoadNextLevel = function (tree) {\n        this.loadNextLevel$.next(new tree_events_1.LoadNextLevelEvent(tree));\n    };\n    TreeService.prototype.draggedStream = function (tree, element) {\n        return this.nodeDraggableService.draggableNodeEvents$\n            .filter(function (e) { return e.target === element; })\n            .filter(function (e) { return !e.captured.tree.hasChild(tree); });\n    };\n    TreeService.prototype.setController = function (id, controller) {\n        this.controllers.set(id, controller);\n    };\n    TreeService.prototype.deleteController = function (id) {\n        if (this.controllers.has(id)) {\n            this.controllers.delete(id);\n        }\n    };\n    TreeService.prototype.getController = function (id) {\n        if (this.controllers.has(id)) {\n            return this.controllers.get(id);\n        }\n        return null;\n    };\n    TreeService.prototype.hasController = function (id) {\n        return this.controllers.has(id);\n    };\n    TreeService.prototype.shouldFireLoadNextLevel = function (tree) {\n        var shouldLoadNextLevel = tree.node.emitLoadNextLevel &&\n            !tree.node.loadChildren &&\n            !tree.childrenAreBeingLoaded() &&\n            (!tree.children || fn_utils_1.isEmpty(tree.children));\n        if (shouldLoadNextLevel) {\n            tree.loadingChildrenRequested();\n        }\n        return shouldLoadNextLevel;\n    };\n    TreeService.decorators = [\n        { type: core_1.Injectable },\n    ];\n    return TreeService;\n}());\nexports.TreeService = TreeService;\n",null]}