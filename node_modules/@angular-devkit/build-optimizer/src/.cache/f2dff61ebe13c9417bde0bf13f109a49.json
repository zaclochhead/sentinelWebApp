{"remainingRequest":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@asymmetrik\\ngx-leaflet\\dist\\leaflet\\layers\\control\\leaflet-control-layers.wrapper.js","dependencies":[{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@asymmetrik\\ngx-leaflet\\dist\\leaflet\\layers\\control\\leaflet-control-layers.wrapper.js","mtime":1514571139000},{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527928412363},{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["import { KeyValueChanges, NgZone } from '@angular/core';\r\nimport { control, Control, Layer } from 'leaflet';\r\nimport { LeafletControlLayersChanges } from './leaflet-control-layers-changes.model';\r\nvar LeafletControlLayersWrapper = /*@__PURE__*/ (function () {\r\n    function LeafletControlLayersWrapper(zone) {\r\n        this.zone = zone;\r\n    }\r\n    LeafletControlLayersWrapper.prototype.getLayersControl = function () {\r\n        return this.layersControl;\r\n    };\r\n    LeafletControlLayersWrapper.prototype.init = function (controlConfig, controlOptions) {\r\n        var _this = this;\r\n        var baseLayers = controlConfig.baseLayers || {};\r\n        var overlays = controlConfig.overlays || {};\r\n        this.zone.runOutsideAngular(function () {\r\n            _this.layersControl = control.layers(baseLayers, overlays, controlOptions);\r\n        });\r\n        return this.layersControl;\r\n    };\r\n    LeafletControlLayersWrapper.prototype.applyBaseLayerChanges = function (changes) {\r\n        var results = new LeafletControlLayersChanges();\r\n        if (null != this.layersControl) {\r\n            results = this.applyChanges(changes, this.layersControl.addBaseLayer);\r\n        }\r\n        return results;\r\n    };\r\n    LeafletControlLayersWrapper.prototype.applyOverlayChanges = function (changes) {\r\n        var results = new LeafletControlLayersChanges();\r\n        if (null != this.layersControl) {\r\n            results = this.applyChanges(changes, this.layersControl.addOverlay);\r\n        }\r\n        return results;\r\n    };\r\n    LeafletControlLayersWrapper.prototype.applyChanges = function (changes, addFn) {\r\n        var _this = this;\r\n        var results = new LeafletControlLayersChanges();\r\n        if (null != changes) {\r\n            changes.forEachChangedItem(function (c) {\r\n                _this.layersControl.removeLayer(c.previousValue);\r\n                addFn.call(_this.layersControl, c.currentValue, c.key);\r\n                results.layersChanged++;\r\n            });\r\n            changes.forEachRemovedItem(function (c) {\r\n                _this.layersControl.removeLayer(c.previousValue);\r\n                results.layersRemoved++;\r\n            });\r\n            changes.forEachAddedItem(function (c) {\r\n                addFn.call(_this.layersControl, c.currentValue, c.key);\r\n                results.layersAdded++;\r\n            });\r\n        }\r\n        return results;\r\n    };\r\n    return LeafletControlLayersWrapper;\r\n}());\r\nexport { LeafletControlLayersWrapper };\r\n//# sourceMappingURL=leaflet-control-layers.wrapper.js.map\r\n",null]}