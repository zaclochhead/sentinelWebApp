{"remainingRequest":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@nebular\\theme\\services\\js-themes-registry.service.js","dependencies":[{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@nebular\\theme\\services\\js-themes-registry.service.js","mtime":499162500000},{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527928412363},{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\nimport { Inject, Injectable } from '@angular/core';\nimport { DEFAULT_THEME } from './js-themes/default.theme';\nimport { COSMIC_THEME } from './js-themes/cosmic.theme';\nimport { nbBuiltInJSThemesToken, nbJSThemesToken } from '../theme.options';\nexport var BUILT_IN_THEMES = [\n    DEFAULT_THEME,\n    COSMIC_THEME,\n];\n/**\n * Js Themes registry - provides access to the JS themes' variables.\n * Usually shouldn't be used directly, but through the NbThemeService class methods (getJsTheme).\n */\nvar NbJSThemesRegistry = /*@__PURE__*/ (function () {\n    function NbJSThemesRegistry(builtInThemes, newThemes) {\n        if (newThemes === void 0) {\n            newThemes = [];\n        }\n        var _this = this;\n        this.themes = {};\n        var themes = this.combineByNames(newThemes, builtInThemes);\n        themes.forEach(function (theme) {\n            _this.register(theme, theme.name, theme.base);\n        });\n    }\n    /**\n     * Registers a new JS theme\n     * @param config any\n     * @param themeName string\n     * @param baseTheme string\n     */\n    /**\n       * Registers a new JS theme\n       * @param config any\n       * @param themeName string\n       * @param baseTheme string\n       */\n    NbJSThemesRegistry.prototype.register = /**\n       * Registers a new JS theme\n       * @param config any\n       * @param themeName string\n       * @param baseTheme string\n       */\n        function (config, themeName, baseTheme) {\n            var base = this.has(baseTheme) ? this.get(baseTheme) : {};\n            this.themes[themeName] = this.mergeDeep({}, base, config);\n        };\n    /**\n     * Checks whether the theme is registered\n     * @param themeName\n     * @returns boolean\n     */\n    /**\n       * Checks whether the theme is registered\n       * @param themeName\n       * @returns boolean\n       */\n    NbJSThemesRegistry.prototype.has = /**\n       * Checks whether the theme is registered\n       * @param themeName\n       * @returns boolean\n       */\n        function (themeName) {\n            return !!this.themes[themeName];\n        };\n    /**\n     * Return a theme\n     * @param themeName\n     * @returns NbJSThemeOptions\n     */\n    /**\n       * Return a theme\n       * @param themeName\n       * @returns NbJSThemeOptions\n       */\n    NbJSThemesRegistry.prototype.get = /**\n       * Return a theme\n       * @param themeName\n       * @returns NbJSThemeOptions\n       */\n        function (themeName) {\n            if (!this.themes[themeName]) {\n                throw Error(\"NbThemeConfig: no theme '\" + themeName + \"' found registered.\");\n            }\n            return JSON.parse(JSON.stringify(this.themes[themeName]));\n        };\n    NbJSThemesRegistry.prototype.combineByNames = function (newThemes, oldThemes) {\n        var _this = this;\n        if (newThemes) {\n            var mergedThemes_1 = [];\n            newThemes.forEach(function (theme) {\n                var sameOld = oldThemes.find(function (tm) { return tm.name === theme.name; })\n                    || {};\n                var mergedTheme = _this.mergeDeep({}, sameOld, theme);\n                mergedThemes_1.push(mergedTheme);\n            });\n            oldThemes.forEach(function (theme) {\n                if (!mergedThemes_1.find(function (tm) { return tm.name === theme.name; })) {\n                    mergedThemes_1.push(theme);\n                }\n            });\n            return mergedThemes_1;\n        }\n        return oldThemes;\n    };\n    NbJSThemesRegistry.prototype.isObject = function (item) {\n        return item && typeof item === 'object' && !Array.isArray(item);\n    };\n    // TODO: move to helpers\n    // TODO: move to helpers\n    NbJSThemesRegistry.prototype.mergeDeep =\n        // TODO: move to helpers\n        function (target) {\n            var sources = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                sources[_i - 1] = arguments[_i];\n            }\n            if (!sources.length) {\n                return target;\n            }\n            var source = sources.shift();\n            if (this.isObject(target) && this.isObject(source)) {\n                for (var key in source) {\n                    if (this.isObject(source[key])) {\n                        if (!target[key]) {\n                            Object.assign(target, (_a = {}, _a[key] = {}, _a));\n                        }\n                        this.mergeDeep(target[key], source[key]);\n                    }\n                    else {\n                        Object.assign(target, (_b = {}, _b[key] = source[key], _b));\n                    }\n                }\n            }\n            return this.mergeDeep.apply(this, [target].concat(sources));\n            var _a, _b;\n        };\n    return NbJSThemesRegistry;\n}());\nexport { NbJSThemesRegistry };\n//# sourceMappingURL=js-themes-registry.service.js.map\n",null]}