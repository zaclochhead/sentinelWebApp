{"remainingRequest":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\ng2-tree\\src\\menu\\node-menu.component.js","dependencies":[{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\ng2-tree\\src\\menu\\node-menu.component.js","mtime":1511605106000},{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527928412363},{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar node_menu_service_1 = require(\"./node-menu.service\");\nvar menu_events_1 = require(\"./menu.events\");\nvar event_utils_1 = require(\"../utils/event.utils\");\nvar NodeMenuComponent = /*@__PURE__*/ (function () {\n    function NodeMenuComponent(renderer, nodeMenuService) {\n        this.renderer = renderer;\n        this.nodeMenuService = nodeMenuService;\n        this.menuItemSelected = new core_1.EventEmitter();\n        this.availableMenuItems = [\n            {\n                name: 'New tag',\n                action: menu_events_1.NodeMenuItemAction.NewTag,\n                cssClass: 'new-tag'\n            },\n            {\n                name: 'New folder',\n                action: menu_events_1.NodeMenuItemAction.NewFolder,\n                cssClass: 'new-folder'\n            },\n            {\n                name: 'Rename',\n                action: menu_events_1.NodeMenuItemAction.Rename,\n                cssClass: 'rename'\n            },\n            {\n                name: 'Remove',\n                action: menu_events_1.NodeMenuItemAction.Remove,\n                cssClass: 'remove'\n            }\n        ];\n        this.disposersForGlobalListeners = [];\n    }\n    NodeMenuComponent.prototype.ngOnInit = function () {\n        this.availableMenuItems = this.menuItems || this.availableMenuItems;\n        this.disposersForGlobalListeners.push(this.renderer.listen('document', 'keyup', this.closeMenu.bind(this)));\n        this.disposersForGlobalListeners.push(this.renderer.listen('document', 'mousedown', this.closeMenu.bind(this)));\n    };\n    NodeMenuComponent.prototype.ngOnDestroy = function () {\n        this.disposersForGlobalListeners.forEach(function (dispose) { return dispose(); });\n    };\n    NodeMenuComponent.prototype.onMenuItemSelected = function (e, selectedMenuItem) {\n        if (event_utils_1.isLeftButtonClicked(e)) {\n            this.menuItemSelected.emit({\n                nodeMenuItemAction: selectedMenuItem.action,\n                nodeMenuItemSelected: selectedMenuItem.name\n            });\n            this.nodeMenuService.fireMenuEvent(e.target, menu_events_1.NodeMenuAction.Close);\n        }\n    };\n    NodeMenuComponent.prototype.closeMenu = function (e) {\n        var mouseClicked = e instanceof MouseEvent;\n        // Check if the click is fired on an element inside a menu\n        var containingTarget = (this.menuContainer.nativeElement !== e.target && this.menuContainer.nativeElement.contains(e.target));\n        if (mouseClicked && !containingTarget || event_utils_1.isEscapePressed(e)) {\n            this.nodeMenuService.fireMenuEvent(e.target, menu_events_1.NodeMenuAction.Close);\n        }\n    };\n    NodeMenuComponent.decorators = [\n        { type: core_1.Component, args: [{\n                    selector: 'node-menu',\n                    template: \"\\n    <div class=\\\"node-menu\\\">\\n      <ul class=\\\"node-menu-content\\\" #menuContainer>\\n        <li class=\\\"node-menu-item\\\" *ngFor=\\\"let menuItem of availableMenuItems\\\"\\n          (click)=\\\"onMenuItemSelected($event, menuItem)\\\">\\n          <div class=\\\"node-menu-item-icon {{menuItem.cssClass}}\\\"></div>\\n          <span class=\\\"node-menu-item-value\\\">{{menuItem.name}}</span>\\n        </li>\\n      </ul>\\n    </div>\\n  \"\n                },] },\n    ];\n    NodeMenuComponent.propDecorators = {\n        \"menuItemSelected\": [{ type: core_1.Output },],\n        \"menuItems\": [{ type: core_1.Input },],\n        \"menuContainer\": [{ type: core_1.ViewChild, args: ['menuContainer',] },],\n    };\n    return NodeMenuComponent;\n}());\nexports.NodeMenuComponent = NodeMenuComponent;\n",null]}