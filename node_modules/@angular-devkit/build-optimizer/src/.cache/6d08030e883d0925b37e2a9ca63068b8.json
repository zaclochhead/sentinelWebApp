{"remainingRequest":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@nebular\\theme\\services\\direction.service.js","dependencies":[{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@nebular\\theme\\services\\direction.service.js","mtime":499162500000},{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527928412363},{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["import { InjectionToken, Optional, Inject, Injectable } from '@angular/core';\nimport { ReplaySubject } from 'rxjs';\nimport { share } from 'rxjs/operators';\n/**\n * Layout direction.\n * */\n/**\n * Layout direction.\n * */\nexport var NbLayoutDirection;\n/**\n * Layout direction.\n * */\n(function (NbLayoutDirection) {\n    NbLayoutDirection[\"LTR\"] = \"ltr\";\n    NbLayoutDirection[\"RTL\"] = \"rtl\";\n})(NbLayoutDirection || (NbLayoutDirection = {}));\n;\n/**\n * Layout direction setting injection token.\n * */\nexport var NB_LAYOUT_DIRECTION = new InjectionToken('Layout direction');\n/**\n * Layout Direction Service.\n * Allows to set or get layout direction and listen to it's changes\n */\nvar NbLayoutDirectionService = /*@__PURE__*/ (function () {\n    function NbLayoutDirectionService(direction) {\n        if (direction === void 0) {\n            direction = NbLayoutDirection.LTR;\n        }\n        this.direction = direction;\n        this.$directionChange = new ReplaySubject(1);\n        this.setDirection(direction);\n    }\n    /**\n     * Returns true if layout direction set to left to right.\n     * @returns boolean.\n     * */\n    /**\n       * Returns true if layout direction set to left to right.\n       * @returns boolean.\n       * */\n    NbLayoutDirectionService.prototype.isLtr = /**\n       * Returns true if layout direction set to left to right.\n       * @returns boolean.\n       * */\n        function () {\n            return this.direction === NbLayoutDirection.LTR;\n        };\n    /**\n     * Returns true if layout direction set to right to left.\n     * @returns boolean.\n     * */\n    /**\n       * Returns true if layout direction set to right to left.\n       * @returns boolean.\n       * */\n    NbLayoutDirectionService.prototype.isRtl = /**\n       * Returns true if layout direction set to right to left.\n       * @returns boolean.\n       * */\n        function () {\n            return this.direction === NbLayoutDirection.RTL;\n        };\n    /**\n     * Returns current layout direction.\n     * @returns NbLayoutDirection.\n     * */\n    /**\n       * Returns current layout direction.\n       * @returns NbLayoutDirection.\n       * */\n    NbLayoutDirectionService.prototype.getDirection = /**\n       * Returns current layout direction.\n       * @returns NbLayoutDirection.\n       * */\n        function () {\n            return this.direction;\n        };\n    /**\n     * Sets layout direction\n     * @param {NbLayoutDirection} direction\n     */\n    /**\n       * Sets layout direction\n       * @param {NbLayoutDirection} direction\n       */\n    NbLayoutDirectionService.prototype.setDirection = /**\n       * Sets layout direction\n       * @param {NbLayoutDirection} direction\n       */\n        function (direction) {\n            this.direction = direction;\n            this.$directionChange.next(direction);\n        };\n    /**\n     * Triggered when direction was changed.\n     * @returns Observable<NbLayoutDirection>.\n     */\n    /**\n       * Triggered when direction was changed.\n       * @returns Observable<NbLayoutDirection>.\n       */\n    NbLayoutDirectionService.prototype.onDirectionChange = /**\n       * Triggered when direction was changed.\n       * @returns Observable<NbLayoutDirection>.\n       */\n        function () {\n            return this.$directionChange.pipe(share());\n        };\n    return NbLayoutDirectionService;\n}());\nexport { NbLayoutDirectionService };\n//# sourceMappingURL=direction.service.js.map\n",null]}