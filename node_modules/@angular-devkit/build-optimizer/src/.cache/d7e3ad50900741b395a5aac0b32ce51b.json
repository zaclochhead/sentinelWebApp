{"remainingRequest":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@nebular\\theme\\components\\layout\\layout.component.js","dependencies":[{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@nebular\\theme\\components\\layout\\layout.component.js","mtime":499162500000},{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527928412363},{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\nimport { Component, ComponentFactoryResolver, ElementRef, HostBinding, HostListener, Input, Renderer2, ViewChild, ViewContainerRef, Inject, PLATFORM_ID, } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { Router, NavigationEnd } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter, takeWhile } from 'rxjs/operators';\nimport { convertToBoolProperty } from '../helpers';\nimport { NbThemeService } from '../../services/theme.service';\nimport { NbSpinnerService } from '../../services/spinner.service';\nimport { NbLayoutDirectionService } from '../../services/direction.service';\nimport { NB_WINDOW, NB_DOCUMENT } from '../../theme.options';\n/**\n * A container component which determines a content position inside of the layout.\n * The layout could contain unlimited columns (not including the sidebars).\n *\n * @example By default the columns are ordered from the left to the right,\n * but it's also possible to overwrite this behavior by setting a `left` attribute to the column,\n * moving it to the very first position:\n * ```\n * <nb-layout>\n *   <nb-layout-column>Second</nb-layout-column>\n *   <nb-layout-column>Third</nb-layout-column>\n *   <nb-layout-column left>First</nb-layout-column>\n * </nb-layout>\n * ```\n */\nvar NbLayoutColumnComponent = /*@__PURE__*/ (function () {\n    function NbLayoutColumnComponent() {\n    }\n    Object.defineProperty(NbLayoutColumnComponent.prototype, \"left\", {\n        set: /**\n           * Move the column to the very left position in the layout.\n           * @param {boolean} val\n           */ function (val) {\n            this.leftValue = convertToBoolProperty(val);\n            this.startValue = false;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NbLayoutColumnComponent.prototype, \"start\", {\n        set: /**\n           * Make columnt first in the layout.\n           * @param {boolean} val\n           */ function (val) {\n            this.startValue = convertToBoolProperty(val);\n            this.leftValue = false;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return NbLayoutColumnComponent;\n}());\nexport { NbLayoutColumnComponent };\n/**\n * Page header component.\n * Located on top of the page above the layout columns and sidebars.\n * Could be made `fixed` by setting the corresponding property. In the fixed mode the header becomes\n * sticky to the top of the nb-layout (to of the page).\n *\n * @styles\n *\n * header-font-family\n * header-line-height\n * header-fg\n * header-bg\n * header-height\n * header-padding\n * header-shadow\n */\nvar NbLayoutHeaderComponent = /*@__PURE__*/ (function () {\n    function NbLayoutHeaderComponent() {\n    }\n    Object.defineProperty(NbLayoutHeaderComponent.prototype, \"fixed\", {\n        set: /**\n           * Makes the header sticky to the top of the nb-layout.\n           * @param {boolean} val\n           */ function (val) {\n            this.fixedValue = convertToBoolProperty(val);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return NbLayoutHeaderComponent;\n}());\nexport { NbLayoutHeaderComponent };\n/**\n * Page footer.\n * Located under the nb-layout content (specifically, under the columns).\n * Could be made `fixed`, becoming sticky to the bottom of the view port (window).\n *\n * @styles\n *\n * footer-height\n * footer-padding\n * footer-fg\n * footer-bg\n * footer-separator\n * footer-shadow\n */\nvar NbLayoutFooterComponent = /*@__PURE__*/ (function () {\n    function NbLayoutFooterComponent() {\n    }\n    Object.defineProperty(NbLayoutFooterComponent.prototype, \"fixed\", {\n        set: /**\n           * Makes the footer sticky to the bottom of the window.\n           * @param {boolean} val\n           */ function (val) {\n            this.fixedValue = convertToBoolProperty(val);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return NbLayoutFooterComponent;\n}());\nexport { NbLayoutFooterComponent };\n/**\n * The general Nebular component-container.\n * It is required that all children component of the framework are located inside of the nb-layout.\n *\n * Can contain the following components inside:\n *\n * ```\n * nb-layout-header\n * nb-layout-column\n * nb-sidebar\n * nb-layout-footer\n * ```\n *\n * By default the layout fills up the full view-port.\n * The window scrollbars are disabled on the body and moved inside of the nb-layout, so that the scrollbars\n * won't mess with the fixed nb-header.\n *\n * The children components are projected into the flexible layout structure allowing to adjust the layout behavior\n * based on the settings provided.\n *\n * The layout content (columns) becomes centered when the window width is more than\n * the value specified in the theme variable `layout-content-width`.\n *\n * The layout also contains the area on the very top (the first child of the nb-layout), which could be used\n * to dynamically append some components like modals or spinners/loaders\n * so that they are located on top of the elements hierarchy.\n * More details are below under the `ThemeService` section.\n *\n * The layout component is also responsible for changing of the application themes.\n * It listens to the `themeChange` event and change the theme CSS class appended to body.\n * Based on the class appended a specific CSS-theme is applied to the application.\n * More details of the Theme System could be found here [Enabling Theme System](#/docs/concepts/theme-system)\n *\n * @example A simple layout example:\n *\n * ```\n * <nb-layout>\n *   <nb-layout-header>Great Company</nb-layout-header>\n *\n *   <nb-layout-column>\n *     Hello World!\n *   </nb-layout-column>\n *\n *   <nb-layout-footer>Contact us</nb-layout-footer>\n * </nb-layout>\n * ```\n *\n * @example For example, it is possible to ask the layout to center the columns (notice: we added a `center` attribute\n * to the layout:\n *\n * ```\n * <nb-layout center>\n *   <nb-layout-header>Great Company</nb-layout-header>\n *\n *   <nb-layout-column>\n *     Hello World!\n *   </nb-layout-column>\n *\n *   <nb-layout-footer>Contact us</nb-layout-footer>\n * </nb-layout>\n * ```\n *\n * @styles\n *\n * layout-font-family\n * layout-font-size\n * layout-line-height\n * layout-fg\n * layout-bg\n * layout-min-height\n * layout-content-width\n * layout-window-mode-min-width\n * layout-window-mode-max-width: window mode only, after this value layout turns into floating window\n * layout-window-mode-bg: window mode only, background\n * layout-window-mode-padding-top: window mode only, max padding from top\n * layout-window-shadow: window mode shadow\n * layout-padding\n * layout-medium-padding\n * layout-small-padding\n */\nvar NbLayoutComponent = /*@__PURE__*/ (function () {\n    function NbLayoutComponent(themeService, spinnerService, componentFactoryResolver, elementRef, renderer, router, window, document, platformId, layoutDirectionService) {\n        var _this = this;\n        this.themeService = themeService;\n        this.spinnerService = spinnerService;\n        this.componentFactoryResolver = componentFactoryResolver;\n        this.elementRef = elementRef;\n        this.renderer = renderer;\n        this.router = router;\n        this.window = window;\n        this.document = document;\n        this.platformId = platformId;\n        this.layoutDirectionService = layoutDirectionService;\n        this.centerValue = false;\n        this.windowModeValue = false;\n        this.withScrollValue = false;\n        this.afterViewInit$ = new BehaviorSubject(null);\n        this.alive = true;\n        this.themeService.onThemeChange()\n            .pipe(takeWhile(function () { return _this.alive; }))\n            .subscribe(function (theme) {\n            var body = _this.document.getElementsByTagName('body')[0];\n            if (theme.previous) {\n                _this.renderer.removeClass(body, \"nb-theme-\" + theme.previous);\n            }\n            _this.renderer.addClass(body, \"nb-theme-\" + theme.name);\n        });\n        this.themeService.onAppendLayoutClass()\n            .pipe(takeWhile(function () { return _this.alive; }))\n            .subscribe(function (className) {\n            _this.renderer.addClass(_this.elementRef.nativeElement, className);\n        });\n        this.themeService.onRemoveLayoutClass()\n            .pipe(takeWhile(function () { return _this.alive; }))\n            .subscribe(function (className) {\n            _this.renderer.removeClass(_this.elementRef.nativeElement, className);\n        });\n        this.spinnerService.registerLoader(new Promise(function (resolve, reject) {\n            _this.afterViewInit$\n                .pipe(takeWhile(function () { return _this.alive; }))\n                .subscribe(function (_) { return resolve(); });\n        }));\n        this.spinnerService.load();\n        if (isPlatformBrowser(this.platformId)) {\n            // trigger first time so that after the change we have the initial value\n            this.themeService.changeWindowWidth(this.window.innerWidth);\n        }\n    }\n    Object.defineProperty(NbLayoutComponent.prototype, \"center\", {\n        set: /**\n           * Defines whether the layout columns will be centered after some width\n           * @param {boolean} val\n           */ function (val) {\n            this.centerValue = convertToBoolProperty(val);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NbLayoutComponent.prototype, \"windowMode\", {\n        set: /**\n           * Defines whether the layout enters a 'window' mode, when the layout content (including sidebars and fixed header)\n           * becomes centered by width with a margin from the top of the screen, like a floating window.\n           * Automatically enables `withScroll` mode, as in the window mode scroll must be inside the layout and cannot be on\n           * window. (TODO: check this)\n           * @param {boolean} val\n           */ function (val) {\n            this.windowModeValue = convertToBoolProperty(val);\n            this.withScroll = this.windowModeValue;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NbLayoutComponent.prototype, \"withScroll\", {\n        set: /**\n           * Defines whether to move the scrollbars to layout or leave it at the body level.\n           * Automatically set to true when `windowMode` is enabled.\n           * @param {boolean} val\n           */ function (val) {\n            this.withScrollValue = convertToBoolProperty(val);\n            // TODO: is this the best way of doing it? as we don't have access to body from theme styles\n            // TODO: add e2e test\n            var body = this.document.getElementsByTagName('body')[0];\n            if (this.withScrollValue) {\n                this.renderer.setStyle(body, 'overflow', 'hidden');\n            }\n            else {\n                this.renderer.setStyle(body, 'overflow', 'initial');\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    NbLayoutComponent.prototype.ngAfterViewInit = function () {\n        var _this = this;\n        this.themeService.onAppendToTop()\n            .pipe(takeWhile(function () { return _this.alive; }))\n            .subscribe(function (data) {\n            var componentRef = _this.veryTopRef.createComponent(data.factory);\n            data.listener.next(componentRef);\n            data.listener.complete();\n        });\n        this.themeService.onClearLayoutTop()\n            .pipe(takeWhile(function () { return _this.alive; }))\n            .subscribe(function (data) {\n            _this.veryTopRef.clear();\n            data.listener.next(true);\n        });\n        this.layoutDirectionService.onDirectionChange()\n            .pipe(takeWhile(function () { return _this.alive; }))\n            .subscribe(function (direction) {\n            _this.renderer.setProperty(_this.document, 'dir', direction);\n        });\n        this.afterViewInit$.next(true);\n    };\n    NbLayoutComponent.prototype.ngOnInit = function () {\n        this.initScrollTop();\n    };\n    NbLayoutComponent.prototype.ngOnDestroy = function () {\n        this.themeService.clearLayoutTop();\n        this.alive = false;\n    };\n    NbLayoutComponent.prototype.onResize = function (event) {\n        this.themeService.changeWindowWidth(event.target.innerWidth);\n    };\n    NbLayoutComponent.prototype.initScrollTop = function () {\n        var _this = this;\n        this.router.events\n            .pipe(takeWhile(function () { return _this.alive; }), filter(function (event) { return event instanceof NavigationEnd; }))\n            .subscribe(function () {\n            _this.scrollableContainerRef.nativeElement.scrollTo && _this.scrollableContainerRef.nativeElement.scrollTo(0, 0);\n        });\n    };\n    return NbLayoutComponent;\n}());\nexport { NbLayoutComponent };\n//# sourceMappingURL=layout.component.js.map\n",null]}