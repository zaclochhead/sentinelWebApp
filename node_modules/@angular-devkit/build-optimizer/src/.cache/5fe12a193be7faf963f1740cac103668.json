{"remainingRequest":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\ng2-smart-table\\lib\\data-source\\local\\local.data-source.js","dependencies":[{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\ng2-smart-table\\lib\\data-source\\local\\local.data-source.js","mtime":1505225756000},{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527928412363},{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["import { __extends } from \"tslib\";\r\nimport { LocalSorter } from './local.sorter';\r\nimport { LocalFilter } from './local.filter';\r\nimport { LocalPager } from './local.pager';\r\nimport { DataSource } from '../data-source';\r\nimport { deepExtend } from '../../helpers';\r\nvar LocalDataSource = /*@__PURE__*/ (function (_super) {\r\n    __extends(LocalDataSource, _super);\r\n    function LocalDataSource(data) {\r\n        if (data === void 0) {\r\n            data = [];\r\n        }\r\n        var _this = _super.call(this) || this;\r\n        _this.data = [];\r\n        _this.filteredAndSorted = [];\r\n        _this.sortConf = [];\r\n        _this.filterConf = {\r\n            filters: [],\r\n            andOperator: true,\r\n        };\r\n        _this.pagingConf = {};\r\n        _this.data = data;\r\n        return _this;\r\n    }\r\n    LocalDataSource.prototype.load = function (data) {\r\n        this.data = data;\r\n        return _super.prototype.load.call(this, data);\r\n    };\r\n    LocalDataSource.prototype.prepend = function (element) {\r\n        this.reset(true);\r\n        this.data.unshift(element);\r\n        return _super.prototype.prepend.call(this, element);\r\n    };\r\n    LocalDataSource.prototype.append = function (element) {\r\n        this.reset(true);\r\n        this.data.push(element);\r\n        return _super.prototype.append.call(this, element);\r\n    };\r\n    LocalDataSource.prototype.add = function (element) {\r\n        this.data.push(element);\r\n        return _super.prototype.add.call(this, element);\r\n    };\r\n    LocalDataSource.prototype.remove = function (element) {\r\n        this.data = this.data.filter(function (el) { return el !== element; });\r\n        return _super.prototype.remove.call(this, element);\r\n    };\r\n    LocalDataSource.prototype.update = function (element, values) {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) {\r\n            _this.find(element).then(function (found) {\r\n                found = deepExtend(found, values);\r\n                _super.prototype.update.call(_this, found, values).then(resolve).catch(reject);\r\n            }).catch(reject);\r\n        });\r\n    };\r\n    LocalDataSource.prototype.find = function (element) {\r\n        var found = this.data.find(function (el) { return el === element; });\r\n        if (found) {\r\n            return Promise.resolve(found);\r\n        }\r\n        return Promise.reject(new Error('Element was not found in the dataset'));\r\n    };\r\n    LocalDataSource.prototype.getElements = function () {\r\n        var data = this.data.slice(0);\r\n        return Promise.resolve(this.prepareData(data));\r\n    };\r\n    LocalDataSource.prototype.getFilteredAndSorted = function () {\r\n        var data = this.data.slice(0);\r\n        this.prepareData(data);\r\n        return Promise.resolve(this.filteredAndSorted);\r\n    };\r\n    LocalDataSource.prototype.getAll = function () {\r\n        var data = this.data.slice(0);\r\n        return Promise.resolve(data);\r\n    };\r\n    LocalDataSource.prototype.reset = function (silent) {\r\n        if (silent === void 0) {\r\n            silent = false;\r\n        }\r\n        if (silent) {\r\n            this.filterConf = {\r\n                filters: [],\r\n                andOperator: true,\r\n            };\r\n            this.sortConf = [];\r\n            this.pagingConf['page'] = 1;\r\n        }\r\n        else {\r\n            this.setFilter([], true, false);\r\n            this.setSort([], false);\r\n            this.setPage(1);\r\n        }\r\n    };\r\n    LocalDataSource.prototype.empty = function () {\r\n        this.data = [];\r\n        return _super.prototype.empty.call(this);\r\n    };\r\n    LocalDataSource.prototype.count = function () {\r\n        return this.filteredAndSorted.length;\r\n    };\r\n    /**\r\n     *\r\n     * Array of conf objects\r\n     * [\r\n     *  {field: string, direction: asc|desc|null, compare: Function|null},\r\n     * ]\r\n     * @param conf\r\n     * @param doEmit\r\n     * @returns {LocalDataSource}\r\n     */\r\n    LocalDataSource.prototype.setSort = function (conf, doEmit) {\r\n        if (doEmit === void 0) {\r\n            doEmit = true;\r\n        }\r\n        if (conf !== null) {\r\n            conf.forEach(function (fieldConf) {\r\n                if (!fieldConf['field'] || typeof fieldConf['direction'] === 'undefined') {\r\n                    throw new Error('Sort configuration object is not valid');\r\n                }\r\n            });\r\n            this.sortConf = conf;\r\n        }\r\n        _super.prototype.setSort.call(this, conf, doEmit);\r\n        return this;\r\n    };\r\n    /**\r\n     *\r\n     * Array of conf objects\r\n     * [\r\n     *  {field: string, search: string, filter: Function|null},\r\n     * ]\r\n     * @param conf\r\n     * @param andOperator\r\n     * @param doEmit\r\n     * @returns {LocalDataSource}\r\n     */\r\n    LocalDataSource.prototype.setFilter = function (conf, andOperator, doEmit) {\r\n        var _this = this;\r\n        if (andOperator === void 0) {\r\n            andOperator = true;\r\n        }\r\n        if (doEmit === void 0) {\r\n            doEmit = true;\r\n        }\r\n        if (conf && conf.length > 0) {\r\n            conf.forEach(function (fieldConf) {\r\n                _this.addFilter(fieldConf, andOperator, false);\r\n            });\r\n        }\r\n        else {\r\n            this.filterConf = {\r\n                filters: [],\r\n                andOperator: true,\r\n            };\r\n        }\r\n        this.filterConf.andOperator = andOperator;\r\n        this.pagingConf['page'] = 1;\r\n        _super.prototype.setFilter.call(this, conf, andOperator, doEmit);\r\n        return this;\r\n    };\r\n    LocalDataSource.prototype.addFilter = function (fieldConf, andOperator, doEmit) {\r\n        var _this = this;\r\n        if (andOperator === void 0) {\r\n            andOperator = true;\r\n        }\r\n        if (doEmit === void 0) {\r\n            doEmit = true;\r\n        }\r\n        if (!fieldConf['field'] || typeof fieldConf['search'] === 'undefined') {\r\n            throw new Error('Filter configuration object is not valid');\r\n        }\r\n        var found = false;\r\n        this.filterConf.filters.forEach(function (currentFieldConf, index) {\r\n            if (currentFieldConf['field'] === fieldConf['field']) {\r\n                _this.filterConf.filters[index] = fieldConf;\r\n                found = true;\r\n            }\r\n        });\r\n        if (!found) {\r\n            this.filterConf.filters.push(fieldConf);\r\n        }\r\n        this.filterConf.andOperator = andOperator;\r\n        _super.prototype.addFilter.call(this, fieldConf, andOperator, doEmit);\r\n        return this;\r\n    };\r\n    LocalDataSource.prototype.setPaging = function (page, perPage, doEmit) {\r\n        if (doEmit === void 0) {\r\n            doEmit = true;\r\n        }\r\n        this.pagingConf['page'] = page;\r\n        this.pagingConf['perPage'] = perPage;\r\n        _super.prototype.setPaging.call(this, page, perPage, doEmit);\r\n        return this;\r\n    };\r\n    LocalDataSource.prototype.setPage = function (page, doEmit) {\r\n        if (doEmit === void 0) {\r\n            doEmit = true;\r\n        }\r\n        this.pagingConf['page'] = page;\r\n        _super.prototype.setPage.call(this, page, doEmit);\r\n        return this;\r\n    };\r\n    LocalDataSource.prototype.getSort = function () {\r\n        return this.sortConf;\r\n    };\r\n    LocalDataSource.prototype.getFilter = function () {\r\n        return this.filterConf;\r\n    };\r\n    LocalDataSource.prototype.getPaging = function () {\r\n        return this.pagingConf;\r\n    };\r\n    LocalDataSource.prototype.prepareData = function (data) {\r\n        data = this.filter(data);\r\n        data = this.sort(data);\r\n        this.filteredAndSorted = data.slice(0);\r\n        return this.paginate(data);\r\n    };\r\n    LocalDataSource.prototype.sort = function (data) {\r\n        if (this.sortConf) {\r\n            this.sortConf.forEach(function (fieldConf) {\r\n                data = LocalSorter\r\n                    .sort(data, fieldConf['field'], fieldConf['direction'], fieldConf['compare']);\r\n            });\r\n        }\r\n        return data;\r\n    };\r\n    // TODO: refactor?\r\n    LocalDataSource.prototype.filter = function (data) {\r\n        if (this.filterConf.filters) {\r\n            if (this.filterConf.andOperator) {\r\n                this.filterConf.filters.forEach(function (fieldConf) {\r\n                    if (fieldConf['search'].length > 0) {\r\n                        data = LocalFilter\r\n                            .filter(data, fieldConf['field'], fieldConf['search'], fieldConf['filter']);\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                var mergedData_1 = [];\r\n                this.filterConf.filters.forEach(function (fieldConf) {\r\n                    if (fieldConf['search'].length > 0) {\r\n                        mergedData_1 = mergedData_1.concat(LocalFilter\r\n                            .filter(data, fieldConf['field'], fieldConf['search'], fieldConf['filter']));\r\n                    }\r\n                });\r\n                // remove non unique items\r\n                data = mergedData_1.filter(function (elem, pos, arr) {\r\n                    return arr.indexOf(elem) === pos;\r\n                });\r\n            }\r\n        }\r\n        return data;\r\n    };\r\n    LocalDataSource.prototype.paginate = function (data) {\r\n        if (this.pagingConf && this.pagingConf['page'] && this.pagingConf['perPage']) {\r\n            data = LocalPager.paginate(data, this.pagingConf['page'], this.pagingConf['perPage']);\r\n        }\r\n        return data;\r\n    };\r\n    return LocalDataSource;\r\n}(DataSource));\r\nexport { LocalDataSource };\r\n//# sourceMappingURL=local.data-source.js.map\r\n",null]}