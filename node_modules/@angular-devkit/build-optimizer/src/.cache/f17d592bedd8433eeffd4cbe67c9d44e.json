{"remainingRequest":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@nebular\\theme\\components\\context-menu\\context-menu.directive.js","dependencies":[{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@nebular\\theme\\components\\context-menu\\context-menu.directive.js","mtime":499162500000},{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527928412363},{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\nimport { ComponentFactoryResolver, Directive, ElementRef, HostListener, Inject, Input, PLATFORM_ID, } from '@angular/core';\nimport { NbPopoverDirective } from '../popover/popover.directive';\nimport { NbThemeService } from '../../services/theme.service';\nimport { NbPopoverPlacement } from '../popover/helpers/model';\nimport { NbContextMenuComponent } from './context-menu.component';\nimport { NbPositioningHelper } from '../popover/helpers/positioning.helper';\nimport { NbAdjustmentHelper } from '../popover/helpers/adjustment.helper';\nimport { NbTriggerHelper } from '../popover/helpers/trigger.helper';\nimport { NbPlacementHelper } from '../popover/helpers/placement.helper';\n/**\n * Full featured context menu directive.\n *\n * ![image](assets/images/components/context-menu.gif)\n *\n * @example Just pass menu items array:\n *\n * ```\n * <button [nbContextMenu]=\"items\"></button>\n * ...\n * items = [{ title: 'Profile' }, { title: 'Log out' }];\n * ```\n *\n * @example If you want to handle context menu clicks you have to pass `nbContextMenuTag`\n * param and subscribe to events using NbMenuService.\n * `NbContextMenu` renders plain `NbMenu` inside, so\n * you have to work with it just like with `NbMenu` component:\n *\n * ```\n * <button [nbContextMenu]=\"items\" nbContextMenuTag=\"my-context-menu\"></button>\n * ...\n * nbMenuService.onItemClick()\n *   .pipe(filter(({ tag }) => tag === 'my-context-menu'))\n *   .subscribe(...handle it somehow)\n * ```\n *\n * @example Context menu has different placements, such as: top, bottom, left and right\n * which can be used as following:\n *\n * ```\n * <button [nbContextMenu]=\"items\" nbContextMenuPlacement=\"right\"></button>\n * ...\n * items = [{ title: 'Profile' }, { title: 'Log out' }];\n * ```\n *\n * @example By default context menu will try to adjust itself to maximally fit viewport\n * and provide the best user experience. It will try to change placement of the context menu.\n * If you wanna disable this behaviour just set it falsy value.\n *\n * ```\n * <button [nbContextMenu]=\"items\" nbContextMenuAdjustment=\"counterclockwise\"></button>\n * ...\n * items = [{ title: 'Profile' }, { title: 'Log out' }];\n * ```\n * */\nvar NbContextMenuDirective = /*@__PURE__*/ (function () {\n    function NbContextMenuDirective(hostRef, themeService, componentFactoryResolver, positioningHelper, adjustmentHelper, triggerHelper, platformId, placementHelper) {\n        this.context = {};\n        /**\n             * Initialize popover with all the important inputs.\n             * */\n        this.popover = new NbPopoverDirective(hostRef, themeService, componentFactoryResolver, positioningHelper, adjustmentHelper, triggerHelper, platformId, placementHelper);\n        this.popover.content = NbContextMenuComponent;\n        this.popover.placement = NbPopoverPlacement.BOTTOM;\n    }\n    Object.defineProperty(NbContextMenuDirective.prototype, \"items\", {\n        set: /**\n           * Basic menu items, will be passed to the internal NbMenuComponent.\n           * */ function (items) {\n            this.validateItems(items);\n            this.popover.context = Object.assign(this.context, { items: items });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ;\n    Object.defineProperty(NbContextMenuDirective.prototype, \"placement\", {\n        set: /**\n           * Position will be calculated relatively host element based on the placement.\n           * Can be top, right, bottom and left.\n           * */ function (placement) {\n            this.popover.placement = placement;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ;\n    Object.defineProperty(NbContextMenuDirective.prototype, \"adjustment\", {\n        set: /**\n           * Container placement will be changes automatically based on this strategy if container can't fit view port.\n           * Set this property to any falsy value if you want to disable automatically adjustment.\n           * Available values: clockwise, counterclockwise.\n           * */ function (adjustment) {\n            this.popover.adjustment = adjustment;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NbContextMenuDirective.prototype, \"tag\", {\n        set: /**\n           * Set NbMenu tag, which helps identify menu when working with NbMenuService.\n           * */ function (tag) {\n            this.popover.context = Object.assign(this.context, { tag: tag });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    NbContextMenuDirective.prototype.ngOnInit = function () {\n        this.popover.ngOnInit();\n    };\n    NbContextMenuDirective.prototype.ngOnDestroy = function () {\n        this.popover.ngOnDestroy();\n    };\n    /**\n     * Show context menu.\n     * */\n    /**\n       * Show context menu.\n       * */\n    NbContextMenuDirective.prototype.show = /**\n       * Show context menu.\n       * */\n        function () {\n            this.popover.show();\n        };\n    /**\n     * Hide context menu.\n     * */\n    /**\n       * Hide context menu.\n       * */\n    NbContextMenuDirective.prototype.hide = /**\n       * Hide context menu.\n       * */\n        function () {\n            this.popover.hide();\n        };\n    /**\n     * Toggle context menu state.\n     * */\n    /**\n       * Toggle context menu state.\n       * */\n    NbContextMenuDirective.prototype.toggle = /**\n       * Toggle context menu state.\n       * */\n        function () {\n            this.popover.toggle();\n        };\n    NbContextMenuDirective.prototype.onResize = function () {\n        this.popover.onResize();\n    };\n    /*\n     * NbMenuComponent will crash if don't pass menu items to it.\n     * So, we just validating them and throw custom obvious error.\n     * */\n    /*\n       * NbMenuComponent will crash if don't pass menu items to it.\n       * So, we just validating them and throw custom obvious error.\n       * */\n    NbContextMenuDirective.prototype.validateItems = /*\n       * NbMenuComponent will crash if don't pass menu items to it.\n       * So, we just validating them and throw custom obvious error.\n       * */\n        function (items) {\n            if (!items || !items.length) {\n                throw Error(\"List of menu items expected, but given: \" + items);\n            }\n        };\n    return NbContextMenuDirective;\n}());\nexport { NbContextMenuDirective };\n//# sourceMappingURL=context-menu.directive.js.map\n",null]}