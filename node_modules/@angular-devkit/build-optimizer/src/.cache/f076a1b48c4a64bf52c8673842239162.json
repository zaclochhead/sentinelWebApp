{"remainingRequest":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\ngx-echarts\\ngx-echarts.es5.js","dependencies":[{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\ngx-echarts\\ngx-echarts.es5.js","mtime":1512957249000},{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527928412363},{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["import { Directive, ElementRef, EventEmitter, HostListener, Injectable, Input, NgModule, NgZone, Output } from '@angular/core';\nimport { Observable as Observable$1 } from 'rxjs/Observable';\nimport 'rxjs/add/observable/of';\nimport 'rxjs/add/observable/empty';\nvar ChangeFilter = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} _changes\n     */\n    function ChangeFilter(_changes) {\n        this._changes = _changes;\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ChangeFilter.of = function (changes) {\n        return new ChangeFilter(changes);\n    };\n    /**\n     * @template T\n     * @param {?} key\n     * @return {?}\n     */\n    ChangeFilter.prototype.notEmpty = function (key) {\n        if (this._changes[key]) {\n            var /** @type {?} */ value = this._changes[key].currentValue;\n            if (value !== undefined && value !== null) {\n                return Observable$1.of(value);\n            }\n        }\n        return Observable$1.empty();\n    };\n    /**\n     * @template T\n     * @param {?} key\n     * @return {?}\n     */\n    ChangeFilter.prototype.has = function (key) {\n        if (this._changes[key]) {\n            var /** @type {?} */ value = this._changes[key].currentValue;\n            return Observable$1.of(value);\n        }\n        return Observable$1.empty();\n    };\n    return ChangeFilter;\n}());\nvar NgxEchartsDirective = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} el\n     * @param {?} _ngZone\n     */\n    function NgxEchartsDirective(el, _ngZone) {\n        this.el = el;\n        this._ngZone = _ngZone;\n        // chart events:\n        this.chartInit = new EventEmitter();\n        this.chartClick = new EventEmitter();\n        this.chartDblClick = new EventEmitter();\n        this.chartMouseDown = new EventEmitter();\n        this.chartMouseUp = new EventEmitter();\n        this.chartMouseOver = new EventEmitter();\n        this.chartMouseOut = new EventEmitter();\n        this.chartGlobalOut = new EventEmitter();\n        this.chartContextMenu = new EventEmitter();\n        this.chartDataZoom = new EventEmitter();\n        this._chart = null;\n        this.currentWindowWidth = null;\n    }\n    /**\n     * @return {?}\n     */\n    NgxEchartsDirective.prototype.createChart = function () {\n        var _this = this;\n        this.currentWindowWidth = window.innerWidth;\n        var /** @type {?} */ dom = this.el.nativeElement;\n        if (window && window.getComputedStyle) {\n            var /** @type {?} */ prop = window.getComputedStyle(dom, null).getPropertyValue('height');\n            if (!prop || prop === '0px') {\n                dom.style.height = '400px';\n            }\n        }\n        return this._ngZone.runOutsideAngular(function () { return echarts.init(dom, _this.theme || undefined, _this.initOpts || undefined); });\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    NgxEchartsDirective.prototype.onWindowResize = function (event) {\n        if (event.target.innerWidth !== this.currentWindowWidth) {\n            this.currentWindowWidth = event.target.innerWidth;\n            if (this._chart) {\n                this._chart.resize();\n            }\n        }\n    };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    NgxEchartsDirective.prototype.ngOnChanges = function (changes) {\n        var _this = this;\n        var /** @type {?} */ filter = ChangeFilter.of(changes);\n        filter.notEmpty('options').subscribe(function (opt) { return _this.onOptionsChange(opt); });\n        filter.notEmpty('merge').subscribe(function (opt) { return _this.setOption(opt); });\n        filter.has('loading').subscribe(function (v) { return _this.toggleLoading(!!v); });\n    };\n    /**\n     * @return {?}\n     */\n    NgxEchartsDirective.prototype.ngOnDestroy = function () {\n        if (this._chart) {\n            this._chart.dispose();\n            this._chart = null;\n        }\n    };\n    /**\n     * @param {?} opt\n     * @return {?}\n     */\n    NgxEchartsDirective.prototype.onOptionsChange = function (opt) {\n        if (opt) {\n            if (!this._chart) {\n                this._chart = this.createChart();\n                // output echart instance:\n                this.chartInit.emit(this._chart);\n                // register events:\n                this.registerEvents(this._chart);\n            }\n            this._chart.setOption(this.options, true);\n            this._chart.resize();\n        }\n    };\n    /**\n     * @param {?} _chart\n     * @return {?}\n     */\n    NgxEchartsDirective.prototype.registerEvents = function (_chart) {\n        var _this = this;\n        if (_chart) {\n            // register mouse events:\n            _chart.on('click', function (e) { return _this._ngZone.run(function () { return _this.chartClick.emit(e); }); });\n            _chart.on('dblClick', function (e) { return _this._ngZone.run(function () { return _this.chartDblClick.emit(e); }); });\n            _chart.on('mousedown', function (e) { return _this._ngZone.run(function () { return _this.chartMouseDown.emit(e); }); });\n            _chart.on('mouseup', function (e) { return _this._ngZone.run(function () { return _this.chartMouseUp.emit(e); }); });\n            _chart.on('mouseover', function (e) { return _this._ngZone.run(function () { return _this.chartMouseOver.emit(e); }); });\n            _chart.on('mouseout', function (e) { return _this._ngZone.run(function () { return _this.chartMouseOut.emit(e); }); });\n            _chart.on('globalout', function (e) { return _this._ngZone.run(function () { return _this.chartGlobalOut.emit(e); }); });\n            _chart.on('contextmenu', function (e) { return _this._ngZone.run(function () { return _this.chartContextMenu.emit(e); }); });\n            // other events;\n            _chart.on('datazoom', function (e) { return _this._ngZone.run(function () { return _this.chartDataZoom.emit(e); }); });\n        }\n    };\n    /**\n     * @return {?}\n     */\n    NgxEchartsDirective.prototype.clear = function () {\n        if (this._chart) {\n            this._chart.clear();\n        }\n    };\n    /**\n     * @param {?} loading\n     * @return {?}\n     */\n    NgxEchartsDirective.prototype.toggleLoading = function (loading) {\n        if (this._chart) {\n            loading ? this._chart.showLoading() : this._chart.hideLoading();\n        }\n    };\n    /**\n     * @param {?} option\n     * @param {?=} opts\n     * @return {?}\n     */\n    NgxEchartsDirective.prototype.setOption = function (option, opts) {\n        if (this._chart) {\n            this._chart.setOption(option, opts);\n        }\n    };\n    return NgxEchartsDirective;\n}());\n/**\n * Provide an wrapper for global echarts\n * ```typescript\n * export class AppComponent implements onInit {\n *   constructor(private nes: NgxEchartsService) {}\n *\n *   ngOnInit() {\n *     // const points = ...;\n *     // const rect = ...;\n *\n *     // Get native global echarts object, then call native function\n *     const echarts = this.nes.echarts;\n *     const points = echarts.graphic.clipPointsByRect(points, rect);\n *\n *     // Or call wrapper function directly:\n *     const points = this.nes.graphic.clipPointsByRect(points, rect);\n *   }\n * }\n * ```\n */\nvar NgxEchartsService = /*@__PURE__*/ (function () {\n    function NgxEchartsService() {\n    }\n    Object.defineProperty(NgxEchartsService.prototype, \"echarts\", {\n        /**\n         * Get global echarts object\n         * @return {?}\n         */\n        get: function () {\n            return echarts;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgxEchartsService.prototype, \"graphic\", {\n        /**\n         * Wrapper for echarts.graphic\n         * @return {?}\n         */\n        get: function () {\n            return this._checkEcharts() ? echarts.graphic : undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgxEchartsService.prototype, \"init\", {\n        /**\n         * Wrapper for echarts.init\n         * @return {?}\n         */\n        get: function () {\n            return this._checkEcharts() ? echarts.init : undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgxEchartsService.prototype, \"connect\", {\n        /**\n         * Wrapper for echarts.connect\n         * @return {?}\n         */\n        get: function () {\n            return this._checkEcharts() ? echarts.connect : undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgxEchartsService.prototype, \"disconnect\", {\n        /**\n         * Wrapper for echarts.disconnect\n         * @return {?}\n         */\n        get: function () {\n            return this._checkEcharts() ? echarts.disconnect : undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgxEchartsService.prototype, \"dispose\", {\n        /**\n         * Wrapper for echarts.dispose\n         * @return {?}\n         */\n        get: function () {\n            return this._checkEcharts() ? echarts.dispose : undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgxEchartsService.prototype, \"getInstanceByDom\", {\n        /**\n         * Wrapper for echarts.getInstanceByDom\n         * @return {?}\n         */\n        get: function () {\n            return this._checkEcharts() ? echarts.getInstanceByDom : undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgxEchartsService.prototype, \"registerMap\", {\n        /**\n         * Wrapper for echarts.registerMap\n         * @return {?}\n         */\n        get: function () {\n            return this._checkEcharts() ? echarts.registerMap : undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgxEchartsService.prototype, \"getMap\", {\n        /**\n         * Wrapper for echarts.getMap\n         * @return {?}\n         */\n        get: function () {\n            return this._checkEcharts() ? echarts.getMap : undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgxEchartsService.prototype, \"registerTheme\", {\n        /**\n         * Wrapper for echarts.registerTheme\n         * @return {?}\n         */\n        get: function () {\n            return this._checkEcharts() ? echarts.registerTheme : undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NgxEchartsService.prototype._checkEcharts = function () {\n        if (echarts) {\n            return true;\n        }\n        else {\n            console.error('[ngx-echarts] global ECharts not loaded');\n            return false;\n        }\n    };\n    return NgxEchartsService;\n}());\nvar NgxEchartsModule = /*@__PURE__*/ (function () {\n    function NgxEchartsModule() {\n    }\n    return NgxEchartsModule;\n}());\n/**\n * Generated bundle index. Do not edit.\n */\nexport { NgxEchartsModule, NgxEchartsDirective, NgxEchartsService };\n//# sourceMappingURL=ngx-echarts.es5.js.map\n",null]}