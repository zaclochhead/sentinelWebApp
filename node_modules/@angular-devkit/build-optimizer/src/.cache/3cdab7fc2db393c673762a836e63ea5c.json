{"remainingRequest":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\ng2-smart-table\\lib\\data-source\\data-source.js","dependencies":[{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\ng2-smart-table\\lib\\data-source\\data-source.js","mtime":1505225756000},{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527928412363},{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["import { Subject } from 'rxjs/Subject';\r\nvar DataSource = /*@__PURE__*/ (function () {\r\n    function DataSource() {\r\n        this.onChangedSource = new Subject();\r\n        this.onAddedSource = new Subject();\r\n        this.onUpdatedSource = new Subject();\r\n        this.onRemovedSource = new Subject();\r\n    }\r\n    DataSource.prototype.refresh = function () {\r\n        this.emitOnChanged('refresh');\r\n    };\r\n    DataSource.prototype.load = function (data) {\r\n        this.emitOnChanged('load');\r\n        return Promise.resolve();\r\n    };\r\n    DataSource.prototype.onChanged = function () {\r\n        return this.onChangedSource.asObservable();\r\n    };\r\n    DataSource.prototype.onAdded = function () {\r\n        return this.onAddedSource.asObservable();\r\n    };\r\n    DataSource.prototype.onUpdated = function () {\r\n        return this.onUpdatedSource.asObservable();\r\n    };\r\n    DataSource.prototype.onRemoved = function () {\r\n        return this.onRemovedSource.asObservable();\r\n    };\r\n    DataSource.prototype.prepend = function (element) {\r\n        this.emitOnAdded(element);\r\n        this.emitOnChanged('prepend');\r\n        return Promise.resolve();\r\n    };\r\n    DataSource.prototype.append = function (element) {\r\n        this.emitOnAdded(element);\r\n        this.emitOnChanged('append');\r\n        return Promise.resolve();\r\n    };\r\n    DataSource.prototype.add = function (element) {\r\n        this.emitOnAdded(element);\r\n        this.emitOnChanged('add');\r\n        return Promise.resolve();\r\n    };\r\n    DataSource.prototype.remove = function (element) {\r\n        this.emitOnRemoved(element);\r\n        this.emitOnChanged('remove');\r\n        return Promise.resolve();\r\n    };\r\n    DataSource.prototype.update = function (element, values) {\r\n        this.emitOnUpdated(element);\r\n        this.emitOnChanged('update');\r\n        return Promise.resolve();\r\n    };\r\n    DataSource.prototype.empty = function () {\r\n        this.emitOnChanged('empty');\r\n        return Promise.resolve();\r\n    };\r\n    DataSource.prototype.setSort = function (conf, doEmit) {\r\n        if (doEmit) {\r\n            this.emitOnChanged('sort');\r\n        }\r\n    };\r\n    DataSource.prototype.setFilter = function (conf, andOperator, doEmit) {\r\n        if (doEmit) {\r\n            this.emitOnChanged('filter');\r\n        }\r\n    };\r\n    DataSource.prototype.addFilter = function (fieldConf, andOperator, doEmit) {\r\n        if (doEmit) {\r\n            this.emitOnChanged('filter');\r\n        }\r\n    };\r\n    DataSource.prototype.setPaging = function (page, perPage, doEmit) {\r\n        if (doEmit) {\r\n            this.emitOnChanged('paging');\r\n        }\r\n    };\r\n    DataSource.prototype.setPage = function (page, doEmit) {\r\n        if (doEmit) {\r\n            this.emitOnChanged('page');\r\n        }\r\n    };\r\n    DataSource.prototype.emitOnRemoved = function (element) {\r\n        this.onRemovedSource.next(element);\r\n    };\r\n    DataSource.prototype.emitOnUpdated = function (element) {\r\n        this.onUpdatedSource.next(element);\r\n    };\r\n    DataSource.prototype.emitOnAdded = function (element) {\r\n        this.onAddedSource.next(element);\r\n    };\r\n    DataSource.prototype.emitOnChanged = function (action) {\r\n        var _this = this;\r\n        this.getElements().then(function (elements) {\r\n            return _this.onChangedSource.next({\r\n                action: action,\r\n                elements: elements,\r\n                paging: _this.getPaging(),\r\n                filter: _this.getFilter(),\r\n                sort: _this.getSort(),\r\n            });\r\n        });\r\n    };\r\n    return DataSource;\r\n}());\r\nexport { DataSource };\r\n//# sourceMappingURL=data-source.js.map\r\n",null]}