{"remainingRequest":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@nebular\\theme\\components\\popover\\helpers\\trigger.helper.js","dependencies":[{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@nebular\\theme\\components\\popover\\helpers\\trigger.helper.js","mtime":499162500000},{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527928412363},{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["import { Injectable, Inject } from '@angular/core';\nimport { fromEvent as observableFromEvent, EMPTY as EMPTY$ } from 'rxjs';\nimport { filter, delay, takeWhile, debounceTime, switchMap, repeat, takeUntil } from 'rxjs/operators';\nimport { NB_DOCUMENT } from '../../../theme.options';\nimport { NbPopoverMode } from './model';\n/**\n * Describes popover triggers strategies based on popover {@link NbPopoverMode} mode.\n * */\nvar NB_TRIGGERS = (_a = {},\n    /**\n     * Creates toggle and close events streams based on popover {@link NbPopoverMode#CLICK} mode.\n     * Fires toggle event when click was performed on the host element.\n     * Fires close event when click was performed on the document but\n     * not on the host or container or popover container isn't rendered yet.\n     *\n     * @param host {HTMLElement} popover host element.\n     * @param getContainer {Function} popover container getter.\n     * @param document {Document} document ref.\n     *\n     * @return {NbPopoverTrigger} open and close events streams.\n     * */\n    _a[NbPopoverMode.CLICK] = /**\n       * Creates toggle and close events streams based on popover {@link NbPopoverMode#CLICK} mode.\n       * Fires toggle event when click was performed on the host element.\n       * Fires close event when click was performed on the document but\n       * not on the host or container or popover container isn't rendered yet.\n       *\n       * @param host {HTMLElement} popover host element.\n       * @param getContainer {Function} popover container getter.\n       * @param document {Document} document ref.\n       *\n       * @return {NbPopoverTrigger} open and close events streams.\n       * */\n        function (host, getContainer, document) {\n            return {\n                open: EMPTY$,\n                close: observableFromEvent(document, 'click')\n                    .pipe(filter(function (event) {\n                    return !host.contains(event.target)\n                        && getContainer()\n                        && !getContainer().location.nativeElement.contains(event.target);\n                })),\n                toggle: observableFromEvent(host, 'click'),\n            };\n        },\n    /**\n     * Creates open and close events streams based on popover {@link NbPopoverMode#HOVER} mode.\n     * Fires open event when mouse hovers over the host element and stay over at least 100 milliseconds.\n     * Fires close event when mouse leaves the host element and stops out of the host and popover container.\n     *\n     * @param host {HTMLElement} popover host element.\n     * @param getContainer {Function} popover container getter.\n     * @param document {Document} document ref.\n     *\n     * @return {NbPopoverTrigger} open and close events streams.\n     * */\n    _a[NbPopoverMode.HOVER] = /**\n       * Creates open and close events streams based on popover {@link NbPopoverMode#HOVER} mode.\n       * Fires open event when mouse hovers over the host element and stay over at least 100 milliseconds.\n       * Fires close event when mouse leaves the host element and stops out of the host and popover container.\n       *\n       * @param host {HTMLElement} popover host element.\n       * @param getContainer {Function} popover container getter.\n       * @param document {Document} document ref.\n       *\n       * @return {NbPopoverTrigger} open and close events streams.\n       * */\n        function (host, getContainer, document) {\n            return {\n                open: observableFromEvent(host, 'mouseenter')\n                    .pipe(delay(100), takeUntil(observableFromEvent(host, 'mouseleave')), repeat()),\n                close: observableFromEvent(host, 'mouseleave')\n                    .pipe(switchMap(function () {\n                    return observableFromEvent(document, 'mousemove')\n                        .pipe(debounceTime(100), takeWhile(function () { return !!getContainer(); }), filter(function (event) {\n                        return !host.contains(event.target)\n                            && !getContainer().location.nativeElement.contains(event.target);\n                    }));\n                })),\n                toggle: EMPTY$,\n            };\n        },\n    /**\n     * Creates open and close events streams based on popover {@link NbPopoverMode#HOVER} mode.\n     * Fires open event when mouse hovers over the host element and stay over at least 100 milliseconds.\n     * Fires close event when mouse leaves the host element.\n     *\n     * @param host {HTMLElement} popover host element.\n     *\n     * @return {NbPopoverTrigger} open and close events streams.\n     * */\n    _a[NbPopoverMode.HINT] = /**\n       * Creates open and close events streams based on popover {@link NbPopoverMode#HOVER} mode.\n       * Fires open event when mouse hovers over the host element and stay over at least 100 milliseconds.\n       * Fires close event when mouse leaves the host element.\n       *\n       * @param host {HTMLElement} popover host element.\n       *\n       * @return {NbPopoverTrigger} open and close events streams.\n       * */\n        function (host) {\n            return {\n                open: observableFromEvent(host, 'mouseenter')\n                    .pipe(delay(100), takeUntil(observableFromEvent(host, 'mouseleave')), repeat()),\n                close: observableFromEvent(host, 'mouseleave'),\n                toggle: EMPTY$,\n            };\n        },\n    _a);\nvar NbTriggerHelper = /*@__PURE__*/ (function () {\n    function NbTriggerHelper(document) {\n        this.document = document;\n    }\n    /**\n     * Creates open and close events streams based on popover {@link NbPopoverMode} mode.\n     *\n     * @param host {HTMLElement} popover host element.\n     * @param getContainer {Function} popover container getter.\n     * Getter required because listen can be called when container isn't initialized.\n     * @param mode {NbPopoverMode} describes container triggering strategy.\n     *\n     * @return {NbPopoverTrigger} open and close events streams.\n     * */\n    /**\n       * Creates open and close events streams based on popover {@link NbPopoverMode} mode.\n       *\n       * @param host {HTMLElement} popover host element.\n       * @param getContainer {Function} popover container getter.\n       * Getter required because listen can be called when container isn't initialized.\n       * @param mode {NbPopoverMode} describes container triggering strategy.\n       *\n       * @return {NbPopoverTrigger} open and close events streams.\n       * */\n    NbTriggerHelper.prototype.createTrigger = /**\n       * Creates open and close events streams based on popover {@link NbPopoverMode} mode.\n       *\n       * @param host {HTMLElement} popover host element.\n       * @param getContainer {Function} popover container getter.\n       * Getter required because listen can be called when container isn't initialized.\n       * @param mode {NbPopoverMode} describes container triggering strategy.\n       *\n       * @return {NbPopoverTrigger} open and close events streams.\n       * */\n        function (host, getContainer, mode) {\n            var createTrigger = NB_TRIGGERS[mode];\n            return createTrigger.call(NB_TRIGGERS, host, getContainer, this.document);\n        };\n    return NbTriggerHelper;\n}());\nexport { NbTriggerHelper };\nvar _a;\n//# sourceMappingURL=trigger.helper.js.map\n",null]}