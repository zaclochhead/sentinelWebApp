{"remainingRequest":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@nebular\\auth\\services\\token\\token.service.js","dependencies":[{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@nebular\\auth\\services\\token\\token.service.js","mtime":499162500000},{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527928412363},{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject, of as observableOf } from 'rxjs';\nimport { filter, share } from 'rxjs/operators';\nimport { NbTokenStorage } from './token-storage';\n/**\n * Service that allows you to manage authentication token - get, set, clear and also listen to token changes over time.\n */\nvar NbTokenService = /*@__PURE__*/ (function () {\n    function NbTokenService(tokenStorage) {\n        this.tokenStorage = tokenStorage;\n        this.token$ = new BehaviorSubject(null);\n        this.publishStoredToken();\n    }\n    /**\n     * Publishes token when it changes.\n     * @returns {Observable<NbAuthToken>}\n     */\n    /**\n       * Publishes token when it changes.\n       * @returns {Observable<NbAuthToken>}\n       */\n    NbTokenService.prototype.tokenChange = /**\n       * Publishes token when it changes.\n       * @returns {Observable<NbAuthToken>}\n       */\n        function () {\n            return this.token$\n                .pipe(filter(function (value) { return !!value; }), share());\n        };\n    /**\n     * Sets a token into the storage. This method is used by the NbAuthService automatically.\n     *\n     * @param {NbAuthToken} token\n     * @returns {Observable<any>}\n     */\n    /**\n       * Sets a token into the storage. This method is used by the NbAuthService automatically.\n       *\n       * @param {NbAuthToken} token\n       * @returns {Observable<any>}\n       */\n    NbTokenService.prototype.set = /**\n       * Sets a token into the storage. This method is used by the NbAuthService automatically.\n       *\n       * @param {NbAuthToken} token\n       * @returns {Observable<any>}\n       */\n        function (token) {\n            this.tokenStorage.set(token);\n            this.publishStoredToken();\n            return observableOf(null);\n        };\n    /**\n     * Sets a raw token into the storage. This method is used by the NbAuthService automatically.\n     *\n     * @param {string} token\n     * @returns {Observable<any>}\n     */\n    /**\n       * Sets a raw token into the storage. This method is used by the NbAuthService automatically.\n       *\n       * @param {string} token\n       * @returns {Observable<any>}\n       */\n    NbTokenService.prototype.setRaw = /**\n       * Sets a raw token into the storage. This method is used by the NbAuthService automatically.\n       *\n       * @param {string} token\n       * @returns {Observable<any>}\n       */\n        function (token) {\n            this.tokenStorage.setRaw(token);\n            this.publishStoredToken();\n            return observableOf(null);\n        };\n    /**\n     * Returns observable of current token\n     * @returns {Observable<NbAuthToken>}\n     */\n    /**\n       * Returns observable of current token\n       * @returns {Observable<NbAuthToken>}\n       */\n    NbTokenService.prototype.get = /**\n       * Returns observable of current token\n       * @returns {Observable<NbAuthToken>}\n       */\n        function () {\n            var token = this.tokenStorage.get();\n            return observableOf(token);\n        };\n    /**\n     * Removes the token and published token value\n     *\n     * @returns {Observable<any>}\n     */\n    /**\n       * Removes the token and published token value\n       *\n       * @returns {Observable<any>}\n       */\n    NbTokenService.prototype.clear = /**\n       * Removes the token and published token value\n       *\n       * @returns {Observable<any>}\n       */\n        function () {\n            this.tokenStorage.clear();\n            this.publishStoredToken();\n            return observableOf(null);\n        };\n    NbTokenService.prototype.publishStoredToken = function () {\n        this.token$.next(this.tokenStorage.get());\n    };\n    return NbTokenService;\n}());\nexport { NbTokenService };\n//# sourceMappingURL=token.service.js.map\n",null]}