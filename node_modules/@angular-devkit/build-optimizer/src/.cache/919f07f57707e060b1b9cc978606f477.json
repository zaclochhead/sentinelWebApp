{"remainingRequest":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@nebular\\theme\\components\\sidebar\\sidebar.service.js","dependencies":[{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@nebular\\theme\\components\\sidebar\\sidebar.service.js","mtime":499162500000},{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527928412363},{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\nimport { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { share } from 'rxjs/operators';\n/**\n * Sidebar service.\n *\n * Root module service to control the sidebar from any part of the app.\n */\nvar NbSidebarService = /*@__PURE__*/ (function () {\n    function NbSidebarService() {\n        this.toggle$ = new Subject();\n        this.expand$ = new Subject();\n        this.collapse$ = new Subject();\n    }\n    /**\n     * Subscribe to toggle events\n     *\n     * @returns Observable<{ compact: boolean, tag: string }>\n     */\n    /**\n       * Subscribe to toggle events\n       *\n       * @returns Observable<{ compact: boolean, tag: string }>\n       */\n    NbSidebarService.prototype.onToggle = /**\n       * Subscribe to toggle events\n       *\n       * @returns Observable<{ compact: boolean, tag: string }>\n       */\n        function () {\n            return this.toggle$.pipe(share());\n        };\n    /**\n     * Subscribe to expand events\n     * @returns Observable<{ tag: string }>\n     */\n    /**\n       * Subscribe to expand events\n       * @returns Observable<{ tag: string }>\n       */\n    NbSidebarService.prototype.onExpand = /**\n       * Subscribe to expand events\n       * @returns Observable<{ tag: string }>\n       */\n        function () {\n            return this.expand$.pipe(share());\n        };\n    /**\n     * Subscribe to collapse evens\n     * @returns Observable<{ tag: string }>\n     */\n    /**\n       * Subscribe to collapse evens\n       * @returns Observable<{ tag: string }>\n       */\n    NbSidebarService.prototype.onCollapse = /**\n       * Subscribe to collapse evens\n       * @returns Observable<{ tag: string }>\n       */\n        function () {\n            return this.collapse$.pipe(share());\n        };\n    /**\n     * Toggle a sidebar\n     * @param {boolean} compact\n     * @param {string} tag If you have multiple sidebars on the page, mark them with `tag` input property and pass it here\n     * to specify which sidebar you want to control\n     */\n    /**\n       * Toggle a sidebar\n       * @param {boolean} compact\n       * @param {string} tag If you have multiple sidebars on the page, mark them with `tag` input property and pass it here\n       * to specify which sidebar you want to control\n       */\n    NbSidebarService.prototype.toggle = /**\n       * Toggle a sidebar\n       * @param {boolean} compact\n       * @param {string} tag If you have multiple sidebars on the page, mark them with `tag` input property and pass it here\n       * to specify which sidebar you want to control\n       */\n        function (compact, tag) {\n            if (compact === void 0) {\n                compact = false;\n            }\n            this.toggle$.next({ compact: compact, tag: tag });\n        };\n    /**\n     * Expands a sidebar\n     * @param {string} tag If you have multiple sidebars on the page, mark them with `tag` input property and pass it here\n     * to specify which sidebar you want to control\n     */\n    /**\n       * Expands a sidebar\n       * @param {string} tag If you have multiple sidebars on the page, mark them with `tag` input property and pass it here\n       * to specify which sidebar you want to control\n       */\n    NbSidebarService.prototype.expand = /**\n       * Expands a sidebar\n       * @param {string} tag If you have multiple sidebars on the page, mark them with `tag` input property and pass it here\n       * to specify which sidebar you want to control\n       */\n        function (tag) {\n            this.expand$.next({ tag: tag });\n        };\n    /**\n     * Collapses a sidebar\n     * @param {string} tag If you have multiple sidebars on the page, mark them with `tag` input property and pass it here\n     * to specify which sidebar you want to control\n     */\n    /**\n       * Collapses a sidebar\n       * @param {string} tag If you have multiple sidebars on the page, mark them with `tag` input property and pass it here\n       * to specify which sidebar you want to control\n       */\n    NbSidebarService.prototype.collapse = /**\n       * Collapses a sidebar\n       * @param {string} tag If you have multiple sidebars on the page, mark them with `tag` input property and pass it here\n       * to specify which sidebar you want to control\n       */\n        function (tag) {\n            this.collapse$.next({ tag: tag });\n        };\n    return NbSidebarService;\n}());\nexport { NbSidebarService };\n//# sourceMappingURL=sidebar.service.js.map\n",null]}