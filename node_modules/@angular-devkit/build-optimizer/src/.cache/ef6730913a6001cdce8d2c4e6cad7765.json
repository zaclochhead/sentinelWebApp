{"remainingRequest":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\ng2-smart-table\\lib\\grid.js","dependencies":[{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\ng2-smart-table\\lib\\grid.js","mtime":1505225756000},{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527928412363},{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["import { Subject } from 'rxjs/Subject';\r\nimport { Deferred, getDeepFromObject } from './helpers';\r\nimport { DataSet } from './data-set/data-set';\r\nvar Grid = /*@__PURE__*/ (function () {\r\n    function Grid(source, settings) {\r\n        this.createFormShown = false;\r\n        this.onSelectRowSource = new Subject();\r\n        this.setSettings(settings);\r\n        this.setSource(source);\r\n    }\r\n    Grid.prototype.showActionColumn = function (position) {\r\n        return this.isCurrentActionsPosition(position) && this.isActionsVisible();\r\n    };\r\n    Grid.prototype.isCurrentActionsPosition = function (position) {\r\n        return position == this.getSetting('actions.position');\r\n    };\r\n    Grid.prototype.isActionsVisible = function () {\r\n        return this.getSetting('actions.add') || this.getSetting('actions.edit') || this.getSetting('actions.delete') || this.getSetting('actions.custom').length;\r\n    };\r\n    Grid.prototype.isMultiSelectVisible = function () {\r\n        return this.getSetting('selectMode') === 'multi';\r\n    };\r\n    Grid.prototype.getNewRow = function () {\r\n        return this.dataSet.newRow;\r\n    };\r\n    Grid.prototype.setSettings = function (settings) {\r\n        this.settings = settings;\r\n        this.dataSet = new DataSet([], this.getSetting('columns'));\r\n        if (this.source) {\r\n            this.source.refresh();\r\n        }\r\n    };\r\n    Grid.prototype.getDataSet = function () {\r\n        return this.dataSet;\r\n    };\r\n    Grid.prototype.setSource = function (source) {\r\n        var _this = this;\r\n        this.source = this.prepareSource(source);\r\n        this.source.onChanged().subscribe(function (changes) { return _this.processDataChange(changes); });\r\n        this.source.onUpdated().subscribe(function (data) {\r\n            var changedRow = _this.dataSet.findRowByData(data);\r\n            changedRow.setData(data);\r\n        });\r\n    };\r\n    Grid.prototype.getSetting = function (name, defaultValue) {\r\n        return getDeepFromObject(this.settings, name, defaultValue);\r\n    };\r\n    Grid.prototype.getColumns = function () {\r\n        return this.dataSet.getColumns();\r\n    };\r\n    Grid.prototype.getRows = function () {\r\n        return this.dataSet.getRows();\r\n    };\r\n    Grid.prototype.selectRow = function (row) {\r\n        this.dataSet.selectRow(row);\r\n    };\r\n    Grid.prototype.multipleSelectRow = function (row) {\r\n        this.dataSet.multipleSelectRow(row);\r\n    };\r\n    Grid.prototype.onSelectRow = function () {\r\n        return this.onSelectRowSource.asObservable();\r\n    };\r\n    Grid.prototype.edit = function (row) {\r\n        row.isInEditing = true;\r\n    };\r\n    Grid.prototype.create = function (row, confirmEmitter) {\r\n        var _this = this;\r\n        var deferred = new Deferred();\r\n        deferred.promise.then(function (newData) {\r\n            newData = newData ? newData : row.getNewData();\r\n            if (deferred.resolve.skipAdd) {\r\n                _this.createFormShown = false;\r\n            }\r\n            else {\r\n                _this.source.prepend(newData).then(function () {\r\n                    _this.createFormShown = false;\r\n                    _this.dataSet.createNewRow();\r\n                });\r\n            }\r\n        }).catch(function (err) {\r\n            // doing nothing\r\n        });\r\n        if (this.getSetting('add.confirmCreate')) {\r\n            confirmEmitter.emit({\r\n                newData: row.getNewData(),\r\n                source: this.source,\r\n                confirm: deferred,\r\n            });\r\n        }\r\n        else {\r\n            deferred.resolve();\r\n        }\r\n    };\r\n    Grid.prototype.save = function (row, confirmEmitter) {\r\n        var _this = this;\r\n        var deferred = new Deferred();\r\n        deferred.promise.then(function (newData) {\r\n            newData = newData ? newData : row.getNewData();\r\n            if (deferred.resolve.skipEdit) {\r\n                row.isInEditing = false;\r\n            }\r\n            else {\r\n                _this.source.update(row.getData(), newData).then(function () {\r\n                    row.isInEditing = false;\r\n                });\r\n            }\r\n        }).catch(function (err) {\r\n            // doing nothing\r\n        });\r\n        if (this.getSetting('edit.confirmSave')) {\r\n            confirmEmitter.emit({\r\n                data: row.getData(),\r\n                newData: row.getNewData(),\r\n                source: this.source,\r\n                confirm: deferred,\r\n            });\r\n        }\r\n        else {\r\n            deferred.resolve();\r\n        }\r\n    };\r\n    Grid.prototype.delete = function (row, confirmEmitter) {\r\n        var _this = this;\r\n        var deferred = new Deferred();\r\n        deferred.promise.then(function () {\r\n            _this.source.remove(row.getData());\r\n        }).catch(function (err) {\r\n            // doing nothing\r\n        });\r\n        if (this.getSetting('delete.confirmDelete')) {\r\n            confirmEmitter.emit({\r\n                data: row.getData(),\r\n                source: this.source,\r\n                confirm: deferred,\r\n            });\r\n        }\r\n        else {\r\n            deferred.resolve();\r\n        }\r\n    };\r\n    Grid.prototype.processDataChange = function (changes) {\r\n        if (this.shouldProcessChange(changes)) {\r\n            this.dataSet.setData(changes['elements']);\r\n            if (this.getSetting('selectMode') !== 'multi') {\r\n                var row = this.determineRowToSelect(changes);\r\n                if (row) {\r\n                    this.onSelectRowSource.next(row);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    Grid.prototype.shouldProcessChange = function (changes) {\r\n        if (['filter', 'sort', 'page', 'remove', 'refresh', 'load', 'paging'].indexOf(changes['action']) !== -1) {\r\n            return true;\r\n        }\r\n        else if (['prepend', 'append'].indexOf(changes['action']) !== -1 && !this.getSetting('pager.display')) {\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    // TODO: move to selectable? Separate directive\r\n    Grid.prototype.determineRowToSelect = function (changes) {\r\n        if (['load', 'page', 'filter', 'sort', 'refresh'].indexOf(changes['action']) !== -1) {\r\n            return this.dataSet.select();\r\n        }\r\n        if (changes['action'] === 'remove') {\r\n            if (changes['elements'].length === 0) {\r\n                // we have to store which one to select as the data will be reloaded\r\n                this.dataSet.willSelectLastRow();\r\n            }\r\n            else {\r\n                return this.dataSet.selectPreviousRow();\r\n            }\r\n        }\r\n        if (changes['action'] === 'append') {\r\n            // we have to store which one to select as the data will be reloaded\r\n            this.dataSet.willSelectLastRow();\r\n        }\r\n        if (changes['action'] === 'add') {\r\n            return this.dataSet.selectFirstRow();\r\n        }\r\n        if (changes['action'] === 'update') {\r\n            return this.dataSet.selectFirstRow();\r\n        }\r\n        if (changes['action'] === 'prepend') {\r\n            // we have to store which one to select as the data will be reloaded\r\n            this.dataSet.willSelectFirstRow();\r\n        }\r\n        return null;\r\n    };\r\n    Grid.prototype.prepareSource = function (source) {\r\n        var initialSource = this.getInitialSort();\r\n        if (initialSource && initialSource['field'] && initialSource['direction']) {\r\n            source.setSort([initialSource], false);\r\n        }\r\n        if (this.getSetting('pager.display') === true) {\r\n            source.setPaging(1, this.getSetting('pager.perPage'), false);\r\n        }\r\n        source.refresh();\r\n        return source;\r\n    };\r\n    Grid.prototype.getInitialSort = function () {\r\n        var sortConf = {};\r\n        this.getColumns().forEach(function (column) {\r\n            if (column.isSortable && column.defaultSortDirection) {\r\n                sortConf['field'] = column.id;\r\n                sortConf['direction'] = column.defaultSortDirection;\r\n                sortConf['compare'] = column.getCompareFunction();\r\n            }\r\n        });\r\n        return sortConf;\r\n    };\r\n    Grid.prototype.getSelectedRows = function () {\r\n        return this.dataSet.getRows()\r\n            .filter(function (r) { return r.isSelected; });\r\n    };\r\n    Grid.prototype.selectAllRows = function (status) {\r\n        this.dataSet.getRows()\r\n            .forEach(function (r) { return r.isSelected = status; });\r\n    };\r\n    Grid.prototype.getFirstRow = function () {\r\n        return this.dataSet.getFirstRow();\r\n    };\r\n    Grid.prototype.getLastRow = function () {\r\n        return this.dataSet.getLastRow();\r\n    };\r\n    return Grid;\r\n}());\r\nexport { Grid };\r\n//# sourceMappingURL=grid.js.map\r\n",null]}