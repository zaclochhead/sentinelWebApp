{"remainingRequest":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\angular2-toaster\\src\\toaster-container.component.js","dependencies":[{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\angular2-toaster\\src\\toaster-container.component.js","mtime":1500212369000},{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527928412363},{"path":"C:\\Users\\Zac\\Desktop\\2018courses\\sentinel\\Sentinel\\WebApplication\\FrontEnd\\ngx-admin-master\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["import { Component, Input, ChangeDetectorRef, NgZone } from '@angular/core';\nimport { trigger, state, style, animate, transition } from '@angular/animations';\nimport { ToasterConfig } from './toaster-config';\nimport { ToasterService } from './toaster.service';\nvar ToasterContainerComponent = /*@__PURE__*/ (function () {\n    function ToasterContainerComponent(toasterService, ref, ngZone) {\n        this.ref = ref;\n        this.ngZone = ngZone;\n        this.toasts = [];\n        this.toasterService = toasterService;\n    }\n    ToasterContainerComponent.prototype.ngOnInit = function () {\n        this.registerSubscribers();\n        if (this.toasterconfig === null || typeof this.toasterconfig === 'undefined') {\n            this.toasterconfig = new ToasterConfig();\n        }\n    };\n    // event handlers\n    ToasterContainerComponent.prototype.click = function (toast, isCloseButton) {\n        if (this.toasterconfig.tapToDismiss || (toast.showCloseButton && isCloseButton)) {\n            var removeToast = true;\n            if (toast.clickHandler) {\n                if (typeof toast.clickHandler === 'function') {\n                    removeToast = toast.clickHandler(toast, isCloseButton);\n                }\n                else {\n                    console.log('The toast click handler is not a callable function.');\n                    return false;\n                }\n            }\n            if (removeToast) {\n                this.removeToast(toast);\n            }\n        }\n    };\n    ToasterContainerComponent.prototype.childClick = function ($event) {\n        this.click($event.value.toast, $event.value.isCloseButton);\n    };\n    ToasterContainerComponent.prototype.stopTimer = function (toast) {\n        if (this.toasterconfig.mouseoverTimerStop) {\n            if (toast.timeoutId) {\n                window.clearTimeout(toast.timeoutId);\n                toast.timeoutId = null;\n            }\n        }\n    };\n    ToasterContainerComponent.prototype.restartTimer = function (toast) {\n        if (this.toasterconfig.mouseoverTimerStop) {\n            if (!toast.timeoutId) {\n                this.configureTimer(toast);\n            }\n        }\n        else if (toast.timeoutId === null) {\n            this.removeToast(toast);\n        }\n    };\n    // private functions\n    ToasterContainerComponent.prototype.registerSubscribers = function () {\n        var _this = this;\n        this.addToastSubscriber = this.toasterService.addToast.subscribe(function (toast) {\n            _this.addToast(toast);\n        });\n        this.clearToastsSubscriber = this.toasterService.clearToasts.subscribe(function (clearWrapper) {\n            _this.clearToasts(clearWrapper);\n        });\n    };\n    ToasterContainerComponent.prototype.addToast = function (toast) {\n        toast.toasterConfig = this.toasterconfig;\n        if (toast.toastContainerId && this.toasterconfig.toastContainerId\n            && toast.toastContainerId !== this.toasterconfig.toastContainerId) {\n            return;\n        }\n        ;\n        if (!toast.type) {\n            toast.type = this.toasterconfig.defaultTypeClass;\n        }\n        if (this.toasterconfig.preventDuplicates && this.toasts.length > 0) {\n            if (toast.toastId && this.toasts.some(function (t) { return t.toastId === toast.toastId; })) {\n                return;\n            }\n            else if (this.toasts.some(function (t) { return t.body === toast.body; })) {\n                return;\n            }\n        }\n        if (toast.showCloseButton === null || typeof toast.showCloseButton === 'undefined') {\n            if (typeof this.toasterconfig.showCloseButton === 'object') {\n                toast.showCloseButton = this.toasterconfig.showCloseButton[toast.type];\n            }\n            else if (typeof this.toasterconfig.showCloseButton === 'boolean') {\n                toast.showCloseButton = this.toasterconfig.showCloseButton;\n            }\n        }\n        if (toast.showCloseButton) {\n            toast.closeHtml = toast.closeHtml || this.toasterconfig.closeHtml;\n        }\n        toast.bodyOutputType = toast.bodyOutputType || this.toasterconfig.bodyOutputType;\n        this.configureTimer(toast);\n        if (this.toasterconfig.newestOnTop) {\n            this.toasts.unshift(toast);\n            if (this.isLimitExceeded()) {\n                this.toasts.pop();\n            }\n        }\n        else {\n            this.toasts.push(toast);\n            if (this.isLimitExceeded()) {\n                this.toasts.shift();\n            }\n        }\n        if (toast.onShowCallback) {\n            toast.onShowCallback(toast);\n        }\n    };\n    ToasterContainerComponent.prototype.configureTimer = function (toast) {\n        var _this = this;\n        var timeout = (typeof toast.timeout === 'number')\n            ? toast.timeout : this.toasterconfig.timeout;\n        if (typeof timeout === 'object') {\n            timeout = timeout[toast.type];\n        }\n        ;\n        if (timeout > 0) {\n            this.ngZone.runOutsideAngular(function () {\n                toast.timeoutId = window.setTimeout(function () {\n                    _this.ngZone.run(function () {\n                        _this.ref.markForCheck();\n                        _this.removeToast(toast);\n                    });\n                }, timeout);\n            });\n        }\n    };\n    ToasterContainerComponent.prototype.isLimitExceeded = function () {\n        return this.toasterconfig.limit && this.toasts.length > this.toasterconfig.limit;\n    };\n    ToasterContainerComponent.prototype.removeToast = function (toast) {\n        var index = this.toasts.indexOf(toast);\n        if (index < 0) {\n            return;\n        }\n        ;\n        this.toasts.splice(index, 1);\n        if (toast.timeoutId) {\n            window.clearTimeout(toast.timeoutId);\n            toast.timeoutId = null;\n        }\n        if (toast.onHideCallback) {\n            toast.onHideCallback(toast);\n        }\n        this.toasterService._removeToastSubject.next({ toastId: toast.toastId, toastContainerId: toast.toastContainerId });\n    };\n    ToasterContainerComponent.prototype.removeAllToasts = function () {\n        for (var i = this.toasts.length - 1; i >= 0; i--) {\n            this.removeToast(this.toasts[i]);\n        }\n    };\n    ToasterContainerComponent.prototype.clearToasts = function (clearWrapper) {\n        var toastId = clearWrapper.toastId;\n        var toastContainerId = clearWrapper.toastContainerId;\n        if (toastContainerId === null || typeof toastContainerId === 'undefined') {\n            this.clearToastsAction(toastId);\n        }\n        else if (toastContainerId === this.toasterconfig.toastContainerId) {\n            this.clearToastsAction(toastId);\n        }\n    };\n    ToasterContainerComponent.prototype.clearToastsAction = function (toastId) {\n        if (toastId) {\n            this.removeToast(this.toasts.filter(function (t) { return t.toastId === toastId; })[0]);\n        }\n        else {\n            this.removeAllToasts();\n        }\n    };\n    ToasterContainerComponent.prototype.ngOnDestroy = function () {\n        if (this.addToastSubscriber) {\n            this.addToastSubscriber.unsubscribe();\n        }\n        if (this.clearToastsSubscriber) {\n            this.clearToastsSubscriber.unsubscribe();\n        }\n    };\n    return ToasterContainerComponent;\n}());\nexport { ToasterContainerComponent };\n//# sourceMappingURL=toaster-container.component.js.map\n",null]}